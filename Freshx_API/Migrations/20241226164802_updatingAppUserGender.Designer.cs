// <auto-generated />
using System;
using Freshx_API.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Freshx_API.Migrations
{
    [DbContext(typeof(FreshxDBContext))]
    [Migration("20241226164802_updatingAppUserGender")]
    partial class updatingAppUserGender
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Freshx_API.Models.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("AvatarId")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("DistrictId")
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ExpiredTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IdentityCardNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("ProvinceId")
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("WardId")
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.HasIndex("DistrictId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("ProvinceId");

                    b.HasIndex("WardId");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Freshx_API.Models.Appointment", b =>
                {
                    b.Property<int>("AppointmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AppointmentId"));

                    b.Property<DateTime?>("AppointmentTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ExaminationId")
                        .HasColumnType("int");

                    b.Property<int?>("PatientId")
                        .HasColumnType("int");

                    b.Property<int?>("ReceptionId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("SentTime")
                        .HasColumnType("datetime2");

                    b.HasKey("AppointmentId");

                    b.HasIndex("ExaminationId");

                    b.HasIndex("PatientId");

                    b.HasIndex("ReceptionId");

                    b.ToTable("Appointments");
                });

            modelBuilder.Entity("Freshx_API.Models.Bill", b =>
                {
                    b.Property<int>("BillId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BillId"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PaymentStatus")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("ReceptionId")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("BillId");

                    b.HasIndex("ReceptionId");

                    b.ToTable("Bills");
                });

            modelBuilder.Entity("Freshx_API.Models.BillDetail", b =>
                {
                    b.Property<int>("BillDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BillDetailId"));

                    b.Property<int>("BillId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("ServiceCatalogId")
                        .HasColumnType("int");

                    b.Property<decimal>("Subtotal")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18, 2)");

                    b.HasKey("BillDetailId");

                    b.HasIndex("BillId");

                    b.HasIndex("ServiceCatalogId");

                    b.ToTable("BillDetails");
                });

            modelBuilder.Entity("Freshx_API.Models.ChatMessage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ConversationId")
                        .HasColumnType("int");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("User")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ConversationId");

                    b.ToTable("ChatMessages");
                });

            modelBuilder.Entity("Freshx_API.Models.Clinic", b =>
                {
                    b.Property<int>("ClinicId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ClinicId"));

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DistrictCode")
                        .HasColumnType("nvarchar(20)");

                    b.Property<int?>("DistrictId")
                        .HasColumnType("int");

                    b.Property<int?>("IsDeleted")
                        .HasColumnType("int");

                    b.Property<int?>("IsSuspended")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber3")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProvinceCode")
                        .HasColumnType("nvarchar(20)");

                    b.Property<int?>("ProvinceId")
                        .HasColumnType("int");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("WardCode")
                        .HasColumnType("nvarchar(20)");

                    b.Property<int?>("WardId")
                        .HasColumnType("int");

                    b.HasKey("ClinicId");

                    b.HasIndex("DistrictCode");

                    b.HasIndex("ProvinceCode");

                    b.HasIndex("WardCode");

                    b.ToTable("Hospitals");
                });

            modelBuilder.Entity("Freshx_API.Models.ConclusionDictionary", b =>
                {
                    b.Property<int>("ConclusionDictionaryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ConclusionDictionaryId"));

                    b.Property<bool?>("CalculateDueDate")
                        .HasColumnType("bit");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Conclusion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Diagnosis")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Gender")
                        .HasColumnType("int");

                    b.Property<int?>("IsDeleted")
                        .HasColumnType("int");

                    b.Property<int?>("IsSuspended")
                        .HasColumnType("int");

                    b.Property<string>("MedicalAdvice")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SequenceNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ServiceCatalogId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ConclusionDictionaryId");

                    b.HasIndex("ServiceCatalogId");

                    b.ToTable("ConclusionDictionaries");
                });

            modelBuilder.Entity("Freshx_API.Models.Conversation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Conversations");
                });

            modelBuilder.Entity("Freshx_API.Models.Country", b =>
                {
                    b.Property<int>("CountryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CountryId"));

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("IsDeleted")
                        .HasColumnType("int");

                    b.Property<int?>("IsSuspended")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameEnglish")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameLatin")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShortName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("CountryId");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("Freshx_API.Models.Department", b =>
                {
                    b.Property<int>("DepartmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DepartmentId"));

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DepartmentTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("IsDeleted")
                        .HasColumnType("int");

                    b.Property<int?>("IsSuspended")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("DepartmentId");

                    b.HasIndex("DepartmentTypeId");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("Freshx_API.Models.DepartmentType", b =>
                {
                    b.Property<int>("DepartmentTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DepartmentTypeId"));

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("IsDeleted")
                        .HasColumnType("int");

                    b.Property<int?>("IsSuspended")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("DepartmentTypeId");

                    b.ToTable("DepartmentTypes");
                });

            modelBuilder.Entity("Freshx_API.Models.DiagnosisDictionary", b =>
                {
                    b.Property<int>("DiagnosisDictionaryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DiagnosisDictionaryId"));

                    b.Property<bool?>("CalculateDueDate")
                        .HasColumnType("bit");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Diagnosis")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("IsDeleted")
                        .HasColumnType("int");

                    b.Property<int?>("IsSuspended")
                        .HasColumnType("int");

                    b.Property<string>("MedicalAdvice")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SequenceNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("DiagnosisDictionaryId");

                    b.ToTable("DiagnosisDictionaries");
                });

            modelBuilder.Entity("Freshx_API.Models.DiagnosticImagingResult", b =>
                {
                    b.Property<int>("DiagnosticImagingResultId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DiagnosticImagingResultId"));

                    b.Property<int?>("ConcludingDoctorId")
                        .HasColumnType("int");

                    b.Property<string>("Conclusion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ConclusionDictionaryId")
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Diagnosis")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ExecutionDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ExecutionTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("GpbmacroDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GpbmicroDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Instruction")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("IsDeleted")
                        .HasColumnType("int");

                    b.Property<int?>("IsSampleCollectedAtHome")
                        .HasColumnType("int");

                    b.Property<int?>("MedicalServiceRequestId")
                        .HasColumnType("int");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OtherComment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PatientId")
                        .HasColumnType("int");

                    b.Property<int?>("ReceptionId")
                        .HasColumnType("int");

                    b.Property<string>("Result")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ResultTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("SampleCollectionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SampleCollectionLocation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SampleCollectionLocationMedicalFacilityId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("SampleCollectionTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("SampleCollectorId")
                        .HasColumnType("int");

                    b.Property<int?>("SampleQualityId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("SampleReceivedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("SampleReceivedTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("SampleTypeId")
                        .HasColumnType("int");

                    b.Property<string>("SpouseName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SpouseYearOfBirth")
                        .HasColumnType("int");

                    b.Property<int?>("TechnicianId")
                        .HasColumnType("int");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("DiagnosticImagingResultId");

                    b.HasIndex("ConcludingDoctorId");

                    b.HasIndex("ConclusionDictionaryId");

                    b.HasIndex("MedicalServiceRequestId");

                    b.HasIndex("PatientId");

                    b.HasIndex("ReceptionId");

                    b.HasIndex("SampleCollectorId");

                    b.HasIndex("TechnicianId");

                    b.ToTable("DiagnosticImagingResults");
                });

            modelBuilder.Entity("Freshx_API.Models.DiseaseGroup", b =>
                {
                    b.Property<int>("DiseaseGroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DiseaseGroupId"));

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("IsDeleted")
                        .HasColumnType("int");

                    b.Property<int?>("IsSuspended")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("DiseaseGroupId");

                    b.ToTable("DiseaseGroups");
                });

            modelBuilder.Entity("Freshx_API.Models.District", b =>
                {
                    b.Property<string>("Code")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int?>("AdministrativeUnitId")
                        .HasColumnType("int");

                    b.Property<string>("CodeName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int?>("CountryId")
                        .HasColumnType("int");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("FullNameEn")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("NameEn")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("ProvinceCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Code");

                    b.HasIndex("ProvinceCode");

                    b.ToTable("Districts");
                });

            modelBuilder.Entity("Freshx_API.Models.Doctor", b =>
                {
                    b.Property<int>("DoctorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DoctorId"));

                    b.Property<string>("AccountId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("AvataId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<string>("DistrictId")
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IdentityCardNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("IsDeleted")
                        .HasColumnType("int");

                    b.Property<int?>("IsSuspended")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PositionId")
                        .HasColumnType("int");

                    b.Property<string>("ProvinceId")
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Specialty")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("WardId")
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("DoctorId");

                    b.HasIndex("AccountId")
                        .IsUnique()
                        .HasFilter("[AccountId] IS NOT NULL");

                    b.HasIndex("AvataId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("DistrictId");

                    b.HasIndex("PositionId");

                    b.HasIndex("ProvinceId");

                    b.HasIndex("WardId");

                    b.ToTable("Doctors");
                });

            modelBuilder.Entity("Freshx_API.Models.DrugBooking", b =>
                {
                    b.Property<int>("DrugBookingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DrugBookingId"));

                    b.Property<string>("Action")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("AfternoonDose")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("DaysOfSupply")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("DrugCatalogId")
                        .HasColumnType("int");

                    b.Property<decimal?>("EveningDose")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("ExamineId")
                        .HasColumnType("int");

                    b.Property<decimal?>("MorningDose")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("NoonDose")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PrescriptionId")
                        .HasColumnType("int");

                    b.Property<decimal?>("Quantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.Property<decimal?>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("DrugBookingId");

                    b.HasIndex("DrugCatalogId");

                    b.HasIndex("ExamineId");

                    b.HasIndex("PrescriptionId");

                    b.ToTable("DrugBookings");
                });

            modelBuilder.Entity("Freshx_API.Models.DrugCatalog", b =>
                {
                    b.Property<int>("DrugCatalogId")
                        .HasColumnType("int");

                    b.Property<string>("ActiveIngredient")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("CostPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("CountryId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Dosage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DrugClassification")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DrugTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Effect")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("IsDeleted")
                        .HasColumnType("int");

                    b.Property<int?>("IsSuspended")
                        .HasColumnType("int");

                    b.Property<int?>("ManufacturerId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameUnaccented")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Note1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Note2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Note3")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("QuantityImported")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("QuantityInStock")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ReferenceNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RouteOfAdministration")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UnitOfMeasureId")
                        .HasColumnType("int");

                    b.Property<decimal?>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Usage")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DrugCatalogId");

                    b.HasIndex("CountryId");

                    b.HasIndex("DrugTypeId");

                    b.HasIndex("ManufacturerId");

                    b.HasIndex("UnitOfMeasureId");

                    b.ToTable("DrugCatalogs");
                });

            modelBuilder.Entity("Freshx_API.Models.DrugType", b =>
                {
                    b.Property<int>("DrugTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DrugTypeId"));

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("IsDeleted")
                        .HasColumnType("int");

                    b.Property<int?>("IsSuspended")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("DrugTypeId");

                    b.ToTable("DrugTypes");
                });

            modelBuilder.Entity("Freshx_API.Models.EmailContent", b =>
                {
                    b.Property<int>("EmailContentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EmailContentId"));

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SenderId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("SentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Subject")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EmailContentId");

                    b.HasIndex("SenderId");

                    b.ToTable("EmailContents");
                });

            modelBuilder.Entity("Freshx_API.Models.Employee", b =>
                {
                    b.Property<int>("EmployeeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EmployeeId"));

                    b.Property<string>("AccountId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("AvataId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<string>("DistrictId")
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmployeeCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IdentityCardNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("IsDeleted")
                        .HasColumnType("int");

                    b.Property<int?>("IsSuspended")
                        .HasColumnType("int");

                    b.Property<DateOnly?>("IssuanceDate")
                        .HasColumnType("date");

                    b.Property<string>("IssuancePlace")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PositionId")
                        .HasColumnType("int");

                    b.Property<string>("ProfessionalCertificate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProvinceId")
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("WardId")
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("EmployeeId");

                    b.HasIndex("AccountId")
                        .IsUnique()
                        .HasFilter("[AccountId] IS NOT NULL");

                    b.HasIndex("AvataId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("DistrictId");

                    b.HasIndex("PositionId");

                    b.HasIndex("ProvinceId");

                    b.HasIndex("WardId");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("Freshx_API.Models.Examine", b =>
                {
                    b.Property<int>("ExamineId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ExamineId"));

                    b.Property<string>("Bmi")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Comorbidities")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ComorbidityCodes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ComorbidityNames")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Conclusion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Diagnosis")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DiagnosisDictionaryId")
                        .HasColumnType("int");

                    b.Property<string>("ExaminationDetails")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExaminationNote")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("FollowUpAppointment")
                        .HasColumnType("datetime2");

                    b.Property<string>("FollowUpAppointmentNote")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ICDCatalogId")
                        .HasColumnType("int");

                    b.Property<int?>("IsDeleted")
                        .HasColumnType("int");

                    b.Property<bool>("IsPaid")
                        .HasColumnType("bit");

                    b.Property<string>("LabSummary")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MedicalAdvice")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MedicalHistory")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PatientId")
                        .HasColumnType("int");

                    b.Property<int?>("PrescriptionId")
                        .HasColumnType("int");

                    b.Property<string>("PrescriptionNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReasonForVisit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ReceptionId")
                        .HasColumnType("int");

                    b.Property<string>("RespiratoryRate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Symptoms")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TemplatePrescriptionId")
                        .HasColumnType("int");

                    b.Property<string>("TreatmentDetails")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ExamineId");

                    b.HasIndex("DiagnosisDictionaryId");

                    b.HasIndex("ICDCatalogId");

                    b.HasIndex("PatientId");

                    b.HasIndex("PrescriptionId");

                    b.HasIndex("ReceptionId");

                    b.HasIndex("TemplatePrescriptionId");

                    b.ToTable("Examines");
                });

            modelBuilder.Entity("Freshx_API.Models.ICDCatalog", b =>
                {
                    b.Property<int>("ICDCatalogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ICDCatalogId"));

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ICDCatalogGroupId")
                        .HasColumnType("int");

                    b.Property<bool>("IsInfectious")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsSuspended")
                        .HasColumnType("bit");

                    b.Property<int?>("LegacyCode")
                        .HasColumnType("int");

                    b.Property<string>("Level")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameEnglish")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameRussian")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameUnaccented")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Subgroup")
                        .HasColumnType("nvarchar(max)");

                    b.Property<short?>("Type")
                        .HasColumnType("smallint");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ICDCatalogId");

                    b.HasIndex("ICDCatalogGroupId");

                    b.ToTable("ICDcatalogs");
                });

            modelBuilder.Entity("Freshx_API.Models.Icdchapter", b =>
                {
                    b.Property<int>("IcdchapterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IcdchapterId"));

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsSuspended")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameEnglish")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameUnaccented")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameVietNamese")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("IcdchapterId");

                    b.ToTable("Icdchapters");
                });

            modelBuilder.Entity("Freshx_API.Models.InventoryType", b =>
                {
                    b.Property<int>("InventoryTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InventoryTypeId"));

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("InventoryTypeId");

                    b.ToTable("InventoryTypes");
                });

            modelBuilder.Entity("Freshx_API.Models.LabResult", b =>
                {
                    b.Property<int>("LabResultId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LabResultId"));

                    b.Property<int?>("ConcludingDoctorId")
                        .HasColumnType("int");

                    b.Property<string>("Conclusion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Diagnosis")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ExecutionDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ExecutionTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Instruction")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("IsDeleted")
                        .HasColumnType("int");

                    b.Property<int?>("IsSampleCollectedAtHome")
                        .HasColumnType("int");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PatientId")
                        .HasColumnType("int");

                    b.Property<int?>("ReceptionId")
                        .HasColumnType("int");

                    b.Property<string>("Result")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ResultTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("SampleCollectionDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("SampleCollectionLocationMedicalFacilityId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("SampleCollectionTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("SampleQualityId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("SampleReceivedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("SampleReceivedTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("SampleTypeId")
                        .HasColumnType("int");

                    b.Property<string>("SpouseName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SpouseYearOfBirth")
                        .HasColumnType("int");

                    b.Property<int?>("TechnicianId")
                        .HasColumnType("int");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("LabResultId");

                    b.HasIndex("ConcludingDoctorId");

                    b.HasIndex("PatientId");

                    b.HasIndex("ReceptionId");

                    b.HasIndex("TechnicianId");

                    b.ToTable("LabResults");
                });

            modelBuilder.Entity("Freshx_API.Models.MedicalServiceRequest", b =>
                {
                    b.Property<int>("MedicalServiceRequestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MedicalServiceRequestId"));

                    b.Property<int?>("AssignedByDoctorDoctorId")
                        .HasColumnType("int");

                    b.Property<int?>("AssignedByEmployeeEmployeeId")
                        .HasColumnType("int");

                    b.Property<int?>("AssignedById")
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ExamineId")
                        .HasColumnType("int");

                    b.Property<bool?>("IsApproved")
                        .HasColumnType("bit");

                    b.Property<int?>("IsDeleted")
                        .HasColumnType("int");

                    b.Property<int?>("ParentMedicalServiceRequestMedicalServiceRequestId")
                        .HasColumnType("int");

                    b.Property<int?>("PatientId")
                        .HasColumnType("int");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int");

                    b.Property<int?>("ReceptionId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("RequestTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ServiceId")
                        .HasColumnType("int");

                    b.Property<decimal?>("ServiceTotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool?>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("MedicalServiceRequestId");

                    b.HasIndex("AssignedByDoctorDoctorId");

                    b.HasIndex("AssignedByEmployeeEmployeeId");

                    b.HasIndex("ExamineId");

                    b.HasIndex("ParentMedicalServiceRequestMedicalServiceRequestId");

                    b.HasIndex("PatientId");

                    b.HasIndex("ReceptionId");

                    b.HasIndex("ServiceId");

                    b.ToTable("MedicalServiceRequests");
                });

            modelBuilder.Entity("Freshx_API.Models.Menu", b =>
                {
                    b.Property<int>("MenuId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MenuId"));

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("IsDeleted")
                        .HasColumnType("int");

                    b.Property<int?>("IsSuspended")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ParentMenuId")
                        .HasColumnType("int");

                    b.Property<string>("Path")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("MenuId");

                    b.HasIndex("ParentMenuId");

                    b.ToTable("Menus");
                });

            modelBuilder.Entity("Freshx_API.Models.MenuParent", b =>
                {
                    b.Property<int>("MenuParentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MenuParentId"));

                    b.Property<string>("UserType")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MenuParentId");

                    b.ToTable("MenuPermissions");
                });

            modelBuilder.Entity("Freshx_API.Models.Patient", b =>
                {
                    b.Property<int>("PatientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PatientId"));

                    b.Property<string>("AccountId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AdmissionNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<string>("DistrictId")
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Ethnicity")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IdentityCardNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ImageId")
                        .HasColumnType("int");

                    b.Property<int?>("IsDeleted")
                        .HasColumnType("int");

                    b.Property<int?>("IsSuspended")
                        .HasColumnType("int");

                    b.Property<string>("MedicalRecordNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProvinceId")
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("WardId")
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("PatientId");

                    b.HasIndex("AccountId")
                        .IsUnique()
                        .HasFilter("[AccountId] IS NOT NULL");

                    b.HasIndex("DistrictId");

                    b.HasIndex("ImageId");

                    b.HasIndex("ProvinceId");

                    b.HasIndex("WardId");

                    b.ToTable("Patients");
                });

            modelBuilder.Entity("Freshx_API.Models.Payment", b =>
                {
                    b.Property<int>("PaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PaymentId"));

                    b.Property<decimal>("AmountPaid")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int>("BillId")
                        .HasColumnType("int");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("PaymentId");

                    b.HasIndex("BillId");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("Freshx_API.Models.Pharmacy", b =>
                {
                    b.Property<int>("PharmacyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PharmacyId"));

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<int?>("InventoryTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("IsDeleted")
                        .HasColumnType("int");

                    b.Property<bool?>("IsSuspended")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameUnaccented")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("PharmacyId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("InventoryTypeId");

                    b.ToTable("Pharmacies");
                });

            modelBuilder.Entity("Freshx_API.Models.Position", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Positions");
                });

            modelBuilder.Entity("Freshx_API.Models.Prescription", b =>
                {
                    b.Property<int>("PrescriptionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PrescriptionId"));

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("IsDeleted")
                        .HasColumnType("int");

                    b.Property<bool?>("IsPaid")
                        .HasColumnType("bit");

                    b.Property<int?>("MedicalExaminationId")
                        .HasColumnType("int");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<decimal?>("TotalAmount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("PrescriptionId");

                    b.ToTable("Prescriptions");
                });

            modelBuilder.Entity("Freshx_API.Models.PrescriptionDetail", b =>
                {
                    b.Property<int>("PrescriptionDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PrescriptionDetailId"));

                    b.Property<decimal?>("AfternoonDose")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal?>("DaysOfSupply")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int>("DrugCatalogId")
                        .HasColumnType("int");

                    b.Property<decimal?>("EveningDose")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal?>("MorningDose")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal?>("NoonDose")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("PrescriptionId")
                        .HasColumnType("int");

                    b.Property<decimal?>("Quantity")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal?>("TotalAmount")
                        .HasColumnType("decimal(18, 2)");

                    b.HasKey("PrescriptionDetailId");

                    b.HasIndex("DrugCatalogId");

                    b.HasIndex("PrescriptionId");

                    b.ToTable("PrescriptionDetail");
                });

            modelBuilder.Entity("Freshx_API.Models.Province", b =>
                {
                    b.Property<string>("Code")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int?>("AdministrativeRegionId")
                        .HasColumnType("int");

                    b.Property<int?>("AdministrativeUnitId")
                        .HasColumnType("int");

                    b.Property<string>("CodeName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("FullNameEn")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("NameEn")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Code");

                    b.ToTable("Provinces");
                });

            modelBuilder.Entity("Freshx_API.Models.Reception", b =>
                {
                    b.Property<int>("ReceptionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReceptionId"));

                    b.Property<int?>("AssignedDoctorId")
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("IsDeleted")
                        .HasColumnType("int");

                    b.Property<bool?>("IsPriority")
                        .HasColumnType("bit");

                    b.Property<int?>("MedicalServiceRequestId")
                        .HasColumnType("int");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PatientId")
                        .HasColumnType("int");

                    b.Property<string>("ReasonForVisit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ReceptionDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ReceptionLocationId")
                        .HasColumnType("int");

                    b.Property<int?>("ReceptionistId")
                        .HasColumnType("int");

                    b.Property<int?>("SequenceNumber")
                        .HasColumnType("int");

                    b.Property<int?>("ServiceTotalAmount")
                        .HasColumnType("int");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ReceptionId");

                    b.HasIndex("AssignedDoctorId");

                    b.HasIndex("PatientId");

                    b.HasIndex("ReceptionistId");

                    b.ToTable("Receptions");
                });

            modelBuilder.Entity("Freshx_API.Models.Savefile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("FileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FilePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UploadDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Savefiles");
                });

            modelBuilder.Entity("Freshx_API.Models.ServiceCatalog", b =>
                {
                    b.Property<int>("ServiceCatalogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ServiceCatalogId"));

                    b.Property<string>("Code")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("HasStandardValue")
                        .HasColumnType("bit");

                    b.Property<int?>("IsDeleted")
                        .HasColumnType("int");

                    b.Property<bool?>("IsParentService")
                        .HasColumnType("bit");

                    b.Property<int>("IsSuspended")
                        .HasColumnType("int");

                    b.Property<int?>("Level")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("ParentServiceId")
                        .HasColumnType("int");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int?>("ServiceCatalogId1")
                        .HasColumnType("int");

                    b.Property<int?>("ServiceGroupId")
                        .HasColumnType("int");

                    b.Property<int?>("ServiceGroupId1")
                        .HasColumnType("int");

                    b.Property<int?>("ServiceTypeId")
                        .HasColumnType("int");

                    b.Property<string>("UnitOfMeasure")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ServiceCatalogId");

                    b.HasIndex("ParentServiceId");

                    b.HasIndex("ServiceCatalogId1");

                    b.HasIndex("ServiceGroupId");

                    b.HasIndex("ServiceGroupId1");

                    b.HasIndex("ServiceTypeId");

                    b.ToTable("ServiceCatalogs");
                });

            modelBuilder.Entity("Freshx_API.Models.ServiceGroup", b =>
                {
                    b.Property<int>("ServiceGroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ServiceGroupId"));

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("IsDeleted")
                        .HasColumnType("int");

                    b.Property<int?>("IsSuspended")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ServiceGroupId");

                    b.ToTable("ServiceGroups");
                });

            modelBuilder.Entity("Freshx_API.Models.ServiceStandardValue", b =>
                {
                    b.Property<int>("ServiceStandardValueId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ServiceStandardValueId"));

                    b.Property<string>("ChildrenMaximum")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ChildrenMinimum")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CommonValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FemaleMaximum")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FemaleMinimum")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("IsDeleted")
                        .HasColumnType("int");

                    b.Property<bool?>("IsGreaterThanOrEqualToMaximum")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsLessThanOrEqualToMinimum")
                        .HasColumnType("bit");

                    b.Property<int?>("IsSuspended")
                        .HasColumnType("int");

                    b.Property<string>("MaleMaximum")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MaleMinimum")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ServiceCatalogId")
                        .HasColumnType("int");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ServiceStandardValueId");

                    b.HasIndex("ServiceCatalogId");

                    b.ToTable("ServiceStandardValues");
                });

            modelBuilder.Entity("Freshx_API.Models.ServiceTypes", b =>
                {
                    b.Property<int>("ServiceTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ServiceTypeId"));

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ServiceTypeId");

                    b.ToTable("ServiceTypes");
                });

            modelBuilder.Entity("Freshx_API.Models.Supplier", b =>
                {
                    b.Property<int>("SupplierId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SupplierId"));

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactPerson")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Director")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DistrictCode")
                        .HasColumnType("nvarchar(20)");

                    b.Property<int?>("DistrictId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Fax")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsAssetSupplier")
                        .HasColumnType("bit");

                    b.Property<int?>("IsDeleted")
                        .HasColumnType("int");

                    b.Property<bool?>("IsForeign")
                        .HasColumnType("bit");

                    b.Property<bool>("IsMedicalConsumableSupplier")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPharmaceuticalSupplier")
                        .HasColumnType("bit");

                    b.Property<bool>("IsStateOwned")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSuspended")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameEnglish")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameUnaccented")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameVietNam")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProvinceCode")
                        .HasColumnType("nvarchar(20)");

                    b.Property<int?>("ProvinceId")
                        .HasColumnType("int");

                    b.Property<string>("TaxCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("WardCode")
                        .HasColumnType("nvarchar(20)");

                    b.Property<int?>("WardId")
                        .HasColumnType("int");

                    b.HasKey("SupplierId");

                    b.HasIndex("DistrictCode");

                    b.HasIndex("ProvinceCode");

                    b.HasIndex("WardCode");

                    b.ToTable("Suppliers");
                });

            modelBuilder.Entity("Freshx_API.Models.Technician", b =>
                {
                    b.Property<int>("TechnicianId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TechnicianId"));

                    b.Property<string>("AccountId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<string>("DistrictId")
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IdentityCardNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("IsDeleted")
                        .HasColumnType("int");

                    b.Property<int?>("IsSuspended")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PositionId")
                        .HasColumnType("int");

                    b.Property<string>("ProvinceId")
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("WardId")
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("TechnicianId");

                    b.HasIndex("AccountId")
                        .IsUnique()
                        .HasFilter("[AccountId] IS NOT NULL");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("DistrictId");

                    b.HasIndex("PositionId");

                    b.HasIndex("ProvinceId");

                    b.HasIndex("WardId");

                    b.ToTable("Technicians");
                });

            modelBuilder.Entity("Freshx_API.Models.TemplatePrescription", b =>
                {
                    b.Property<int>("TemplatePrescriptionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TemplatePrescriptionId"));

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DrugCatalogId")
                        .HasColumnType("int");

                    b.Property<int?>("IsDeleted")
                        .HasColumnType("int");

                    b.Property<int?>("IsSuspended")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("TemplatePrescriptionId");

                    b.ToTable("TemplatePrescriptions");
                });

            modelBuilder.Entity("Freshx_API.Models.UnitOfMeasure", b =>
                {
                    b.Property<int>("UnitOfMeasureId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UnitOfMeasureId"));

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("ConversionValue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DrugType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("IsDeleted")
                        .HasColumnType("int");

                    b.Property<int?>("IsSuspended")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("UnitOfMeasureId");

                    b.ToTable("UnitOfMeasures");
                });

            modelBuilder.Entity("Freshx_API.Models.Ward", b =>
                {
                    b.Property<string>("Code")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int?>("AdministrativeUnitId")
                        .HasColumnType("int");

                    b.Property<string>("CodeName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("DistrictCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("FullNameEn")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("NameEn")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Code");

                    b.HasIndex("DistrictCode");

                    b.ToTable("Wards");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Freshx_API.Models.AppUser", b =>
                {
                    b.HasOne("Freshx_API.Models.District", "District")
                        .WithMany()
                        .HasForeignKey("DistrictId");

                    b.HasOne("Freshx_API.Models.Province", "Province")
                        .WithMany()
                        .HasForeignKey("ProvinceId");

                    b.HasOne("Freshx_API.Models.Ward", "Ward")
                        .WithMany()
                        .HasForeignKey("WardId");

                    b.Navigation("District");

                    b.Navigation("Province");

                    b.Navigation("Ward");
                });

            modelBuilder.Entity("Freshx_API.Models.Appointment", b =>
                {
                    b.HasOne("Freshx_API.Models.Examine", "Examination")
                        .WithMany()
                        .HasForeignKey("ExaminationId");

                    b.HasOne("Freshx_API.Models.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId");

                    b.HasOne("Freshx_API.Models.Reception", "Reception")
                        .WithMany()
                        .HasForeignKey("ReceptionId");

                    b.Navigation("Examination");

                    b.Navigation("Patient");

                    b.Navigation("Reception");
                });

            modelBuilder.Entity("Freshx_API.Models.Bill", b =>
                {
                    b.HasOne("Freshx_API.Models.Reception", "Reception")
                        .WithMany()
                        .HasForeignKey("ReceptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Reception");
                });

            modelBuilder.Entity("Freshx_API.Models.BillDetail", b =>
                {
                    b.HasOne("Freshx_API.Models.Bill", "Bill")
                        .WithMany("BillDetails")
                        .HasForeignKey("BillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Freshx_API.Models.ServiceCatalog", "ServiceCatalog")
                        .WithMany()
                        .HasForeignKey("ServiceCatalogId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bill");

                    b.Navigation("ServiceCatalog");
                });

            modelBuilder.Entity("Freshx_API.Models.ChatMessage", b =>
                {
                    b.HasOne("Freshx_API.Models.Conversation", null)
                        .WithMany("Messages")
                        .HasForeignKey("ConversationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Freshx_API.Models.Clinic", b =>
                {
                    b.HasOne("Freshx_API.Models.District", "District")
                        .WithMany()
                        .HasForeignKey("DistrictCode");

                    b.HasOne("Freshx_API.Models.Province", "Province")
                        .WithMany()
                        .HasForeignKey("ProvinceCode");

                    b.HasOne("Freshx_API.Models.Ward", "Ward")
                        .WithMany()
                        .HasForeignKey("WardCode");

                    b.Navigation("District");

                    b.Navigation("Province");

                    b.Navigation("Ward");
                });

            modelBuilder.Entity("Freshx_API.Models.ConclusionDictionary", b =>
                {
                    b.HasOne("Freshx_API.Models.ServiceCatalog", "ServiceCatalog")
                        .WithMany()
                        .HasForeignKey("ServiceCatalogId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("ServiceCatalog");
                });

            modelBuilder.Entity("Freshx_API.Models.Department", b =>
                {
                    b.HasOne("Freshx_API.Models.DepartmentType", "DepartmentType")
                        .WithMany()
                        .HasForeignKey("DepartmentTypeId");

                    b.Navigation("DepartmentType");
                });

            modelBuilder.Entity("Freshx_API.Models.DiagnosticImagingResult", b =>
                {
                    b.HasOne("Freshx_API.Models.Doctor", "ConcludingDoctor")
                        .WithMany()
                        .HasForeignKey("ConcludingDoctorId");

                    b.HasOne("Freshx_API.Models.ConclusionDictionary", "ConclusionDictionary")
                        .WithMany()
                        .HasForeignKey("ConclusionDictionaryId");

                    b.HasOne("Freshx_API.Models.MedicalServiceRequest", "MedicalServiceRequest")
                        .WithMany()
                        .HasForeignKey("MedicalServiceRequestId");

                    b.HasOne("Freshx_API.Models.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId");

                    b.HasOne("Freshx_API.Models.Reception", "Reception")
                        .WithMany()
                        .HasForeignKey("ReceptionId");

                    b.HasOne("Freshx_API.Models.Employee", "SampleCollector")
                        .WithMany()
                        .HasForeignKey("SampleCollectorId");

                    b.HasOne("Freshx_API.Models.Technician", "Technician")
                        .WithMany()
                        .HasForeignKey("TechnicianId");

                    b.Navigation("ConcludingDoctor");

                    b.Navigation("ConclusionDictionary");

                    b.Navigation("MedicalServiceRequest");

                    b.Navigation("Patient");

                    b.Navigation("Reception");

                    b.Navigation("SampleCollector");

                    b.Navigation("Technician");
                });

            modelBuilder.Entity("Freshx_API.Models.District", b =>
                {
                    b.HasOne("Freshx_API.Models.Province", "Province")
                        .WithMany("Districts")
                        .HasForeignKey("ProvinceCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Province");
                });

            modelBuilder.Entity("Freshx_API.Models.Doctor", b =>
                {
                    b.HasOne("Freshx_API.Models.AppUser", "AppUser")
                        .WithOne("Doctor")
                        .HasForeignKey("Freshx_API.Models.Doctor", "AccountId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Freshx_API.Models.Savefile", "Avata")
                        .WithMany()
                        .HasForeignKey("AvataId");

                    b.HasOne("Freshx_API.Models.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId");

                    b.HasOne("Freshx_API.Models.District", "District")
                        .WithMany()
                        .HasForeignKey("DistrictId");

                    b.HasOne("Freshx_API.Models.Position", "Position")
                        .WithMany()
                        .HasForeignKey("PositionId");

                    b.HasOne("Freshx_API.Models.Province", "Province")
                        .WithMany()
                        .HasForeignKey("ProvinceId");

                    b.HasOne("Freshx_API.Models.Ward", "Ward")
                        .WithMany()
                        .HasForeignKey("WardId");

                    b.Navigation("AppUser");

                    b.Navigation("Avata");

                    b.Navigation("Department");

                    b.Navigation("District");

                    b.Navigation("Position");

                    b.Navigation("Province");

                    b.Navigation("Ward");
                });

            modelBuilder.Entity("Freshx_API.Models.DrugBooking", b =>
                {
                    b.HasOne("Freshx_API.Models.DrugCatalog", "DrugCatalog")
                        .WithMany()
                        .HasForeignKey("DrugCatalogId");

                    b.HasOne("Freshx_API.Models.Examine", "MedicalExamination")
                        .WithMany()
                        .HasForeignKey("ExamineId");

                    b.HasOne("Freshx_API.Models.Prescription", "Prescription")
                        .WithMany()
                        .HasForeignKey("PrescriptionId");

                    b.Navigation("DrugCatalog");

                    b.Navigation("MedicalExamination");

                    b.Navigation("Prescription");
                });

            modelBuilder.Entity("Freshx_API.Models.DrugCatalog", b =>
                {
                    b.HasOne("Freshx_API.Models.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId");

                    b.HasOne("Freshx_API.Models.TemplatePrescription", null)
                        .WithMany("DrugCatalogs")
                        .HasForeignKey("DrugCatalogId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Freshx_API.Models.DrugType", "DrugType")
                        .WithMany()
                        .HasForeignKey("DrugTypeId");

                    b.HasOne("Freshx_API.Models.Supplier", "Manufacturer")
                        .WithMany()
                        .HasForeignKey("ManufacturerId");

                    b.HasOne("Freshx_API.Models.UnitOfMeasure", "UnitOfMeasure")
                        .WithMany()
                        .HasForeignKey("UnitOfMeasureId");

                    b.Navigation("Country");

                    b.Navigation("DrugType");

                    b.Navigation("Manufacturer");

                    b.Navigation("UnitOfMeasure");
                });

            modelBuilder.Entity("Freshx_API.Models.EmailContent", b =>
                {
                    b.HasOne("Freshx_API.Models.Employee", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderId");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("Freshx_API.Models.Employee", b =>
                {
                    b.HasOne("Freshx_API.Models.AppUser", "AppUser")
                        .WithOne("Employee")
                        .HasForeignKey("Freshx_API.Models.Employee", "AccountId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Freshx_API.Models.Savefile", "Avata")
                        .WithMany()
                        .HasForeignKey("AvataId");

                    b.HasOne("Freshx_API.Models.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId");

                    b.HasOne("Freshx_API.Models.District", "District")
                        .WithMany()
                        .HasForeignKey("DistrictId");

                    b.HasOne("Freshx_API.Models.Position", "Position")
                        .WithMany()
                        .HasForeignKey("PositionId");

                    b.HasOne("Freshx_API.Models.Province", "Province")
                        .WithMany()
                        .HasForeignKey("ProvinceId");

                    b.HasOne("Freshx_API.Models.Ward", "Ward")
                        .WithMany()
                        .HasForeignKey("WardId");

                    b.Navigation("AppUser");

                    b.Navigation("Avata");

                    b.Navigation("Department");

                    b.Navigation("District");

                    b.Navigation("Position");

                    b.Navigation("Province");

                    b.Navigation("Ward");
                });

            modelBuilder.Entity("Freshx_API.Models.Examine", b =>
                {
                    b.HasOne("Freshx_API.Models.DiagnosisDictionary", "DiagnosisDictionary")
                        .WithMany()
                        .HasForeignKey("DiagnosisDictionaryId");

                    b.HasOne("Freshx_API.Models.ICDCatalog", "ICDCatalog")
                        .WithMany()
                        .HasForeignKey("ICDCatalogId");

                    b.HasOne("Freshx_API.Models.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId");

                    b.HasOne("Freshx_API.Models.Prescription", "Prescription")
                        .WithMany()
                        .HasForeignKey("PrescriptionId");

                    b.HasOne("Freshx_API.Models.Reception", "Reception")
                        .WithMany()
                        .HasForeignKey("ReceptionId");

                    b.HasOne("Freshx_API.Models.TemplatePrescription", "PrescriptionTemplate")
                        .WithMany()
                        .HasForeignKey("TemplatePrescriptionId");

                    b.Navigation("DiagnosisDictionary");

                    b.Navigation("ICDCatalog");

                    b.Navigation("Patient");

                    b.Navigation("Prescription");

                    b.Navigation("PrescriptionTemplate");

                    b.Navigation("Reception");
                });

            modelBuilder.Entity("Freshx_API.Models.ICDCatalog", b =>
                {
                    b.HasOne("Freshx_API.Models.ICDCatalog", "ICDCatalogGroup")
                        .WithMany()
                        .HasForeignKey("ICDCatalogGroupId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("ICDCatalogGroup");
                });

            modelBuilder.Entity("Freshx_API.Models.LabResult", b =>
                {
                    b.HasOne("Freshx_API.Models.Doctor", "ConcludingDoctor")
                        .WithMany()
                        .HasForeignKey("ConcludingDoctorId");

                    b.HasOne("Freshx_API.Models.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId");

                    b.HasOne("Freshx_API.Models.Reception", "Reception")
                        .WithMany()
                        .HasForeignKey("ReceptionId");

                    b.HasOne("Freshx_API.Models.Technician", "Technician")
                        .WithMany()
                        .HasForeignKey("TechnicianId");

                    b.Navigation("ConcludingDoctor");

                    b.Navigation("Patient");

                    b.Navigation("Reception");

                    b.Navigation("Technician");
                });

            modelBuilder.Entity("Freshx_API.Models.MedicalServiceRequest", b =>
                {
                    b.HasOne("Freshx_API.Models.Doctor", "AssignedByDoctor")
                        .WithMany()
                        .HasForeignKey("AssignedByDoctorDoctorId");

                    b.HasOne("Freshx_API.Models.Employee", "AssignedByEmployee")
                        .WithMany()
                        .HasForeignKey("AssignedByEmployeeEmployeeId");

                    b.HasOne("Freshx_API.Models.Examine", null)
                        .WithMany("MedicalServiceRequests")
                        .HasForeignKey("ExamineId");

                    b.HasOne("Freshx_API.Models.MedicalServiceRequest", "ParentMedicalServiceRequest")
                        .WithMany()
                        .HasForeignKey("ParentMedicalServiceRequestMedicalServiceRequestId");

                    b.HasOne("Freshx_API.Models.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId");

                    b.HasOne("Freshx_API.Models.Reception", "Reception")
                        .WithMany("MedicalServiceRequest")
                        .HasForeignKey("ReceptionId");

                    b.HasOne("Freshx_API.Models.ServiceCatalog", "Service")
                        .WithMany()
                        .HasForeignKey("ServiceId");

                    b.Navigation("AssignedByDoctor");

                    b.Navigation("AssignedByEmployee");

                    b.Navigation("ParentMedicalServiceRequest");

                    b.Navigation("Patient");

                    b.Navigation("Reception");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("Freshx_API.Models.Menu", b =>
                {
                    b.HasOne("Freshx_API.Models.MenuParent", "ParentMenu")
                        .WithMany()
                        .HasForeignKey("ParentMenuId");

                    b.Navigation("ParentMenu");
                });

            modelBuilder.Entity("Freshx_API.Models.Patient", b =>
                {
                    b.HasOne("Freshx_API.Models.AppUser", "AppUser")
                        .WithOne("Patient")
                        .HasForeignKey("Freshx_API.Models.Patient", "AccountId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Freshx_API.Models.District", "District")
                        .WithMany()
                        .HasForeignKey("DistrictId");

                    b.HasOne("Freshx_API.Models.Savefile", "Image")
                        .WithMany()
                        .HasForeignKey("ImageId");

                    b.HasOne("Freshx_API.Models.Province", "Province")
                        .WithMany()
                        .HasForeignKey("ProvinceId");

                    b.HasOne("Freshx_API.Models.Ward", "Ward")
                        .WithMany()
                        .HasForeignKey("WardId");

                    b.Navigation("AppUser");

                    b.Navigation("District");

                    b.Navigation("Image");

                    b.Navigation("Province");

                    b.Navigation("Ward");
                });

            modelBuilder.Entity("Freshx_API.Models.Payment", b =>
                {
                    b.HasOne("Freshx_API.Models.Bill", "Bill")
                        .WithMany("Payments")
                        .HasForeignKey("BillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bill");
                });

            modelBuilder.Entity("Freshx_API.Models.Pharmacy", b =>
                {
                    b.HasOne("Freshx_API.Models.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId");

                    b.HasOne("Freshx_API.Models.InventoryType", "InventoryType")
                        .WithMany()
                        .HasForeignKey("InventoryTypeId");

                    b.Navigation("Department");

                    b.Navigation("InventoryType");
                });

            modelBuilder.Entity("Freshx_API.Models.PrescriptionDetail", b =>
                {
                    b.HasOne("Freshx_API.Models.DrugCatalog", "DrugCatalog")
                        .WithMany()
                        .HasForeignKey("DrugCatalogId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Freshx_API.Models.Prescription", "Prescription")
                        .WithMany("PrescriptionDetails")
                        .HasForeignKey("PrescriptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DrugCatalog");

                    b.Navigation("Prescription");
                });

            modelBuilder.Entity("Freshx_API.Models.Reception", b =>
                {
                    b.HasOne("Freshx_API.Models.Doctor", "AssignedDoctor")
                        .WithMany("Receptions")
                        .HasForeignKey("AssignedDoctorId");

                    b.HasOne("Freshx_API.Models.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId");

                    b.HasOne("Freshx_API.Models.Employee", "Receptionist")
                        .WithMany()
                        .HasForeignKey("ReceptionistId");

                    b.Navigation("AssignedDoctor");

                    b.Navigation("Patient");

                    b.Navigation("Receptionist");
                });

            modelBuilder.Entity("Freshx_API.Models.ServiceCatalog", b =>
                {
                    b.HasOne("Freshx_API.Models.ServiceCatalog", "ParentService")
                        .WithMany()
                        .HasForeignKey("ParentServiceId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Freshx_API.Models.ServiceCatalog", null)
                        .WithMany("ChildServices")
                        .HasForeignKey("ServiceCatalogId1");

                    b.HasOne("Freshx_API.Models.ServiceGroup", "ServiceGroup")
                        .WithMany()
                        .HasForeignKey("ServiceGroupId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Freshx_API.Models.ServiceGroup", null)
                        .WithMany("ServiceCatalogs")
                        .HasForeignKey("ServiceGroupId1");

                    b.HasOne("Freshx_API.Models.ServiceTypes", "ServiceTypes")
                        .WithMany()
                        .HasForeignKey("ServiceTypeId");

                    b.Navigation("ParentService");

                    b.Navigation("ServiceGroup");

                    b.Navigation("ServiceTypes");
                });

            modelBuilder.Entity("Freshx_API.Models.ServiceStandardValue", b =>
                {
                    b.HasOne("Freshx_API.Models.ServiceCatalog", "ServiceCatalog")
                        .WithMany("ServiceStandardValues")
                        .HasForeignKey("ServiceCatalogId");

                    b.Navigation("ServiceCatalog");
                });

            modelBuilder.Entity("Freshx_API.Models.Supplier", b =>
                {
                    b.HasOne("Freshx_API.Models.District", "District")
                        .WithMany()
                        .HasForeignKey("DistrictCode");

                    b.HasOne("Freshx_API.Models.Province", "Province")
                        .WithMany()
                        .HasForeignKey("ProvinceCode");

                    b.HasOne("Freshx_API.Models.Ward", "Ward")
                        .WithMany()
                        .HasForeignKey("WardCode");

                    b.Navigation("District");

                    b.Navigation("Province");

                    b.Navigation("Ward");
                });

            modelBuilder.Entity("Freshx_API.Models.Technician", b =>
                {
                    b.HasOne("Freshx_API.Models.AppUser", "AppUser")
                        .WithOne("Technician")
                        .HasForeignKey("Freshx_API.Models.Technician", "AccountId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Freshx_API.Models.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId");

                    b.HasOne("Freshx_API.Models.District", "District")
                        .WithMany()
                        .HasForeignKey("DistrictId");

                    b.HasOne("Freshx_API.Models.Position", "Position")
                        .WithMany()
                        .HasForeignKey("PositionId");

                    b.HasOne("Freshx_API.Models.Province", "Province")
                        .WithMany()
                        .HasForeignKey("ProvinceId");

                    b.HasOne("Freshx_API.Models.Ward", "Ward")
                        .WithMany()
                        .HasForeignKey("WardId");

                    b.Navigation("AppUser");

                    b.Navigation("Department");

                    b.Navigation("District");

                    b.Navigation("Position");

                    b.Navigation("Province");

                    b.Navigation("Ward");
                });

            modelBuilder.Entity("Freshx_API.Models.Ward", b =>
                {
                    b.HasOne("Freshx_API.Models.District", "District")
                        .WithMany()
                        .HasForeignKey("DistrictCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("District");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Freshx_API.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Freshx_API.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Freshx_API.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Freshx_API.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Freshx_API.Models.AppUser", b =>
                {
                    b.Navigation("Doctor");

                    b.Navigation("Employee");

                    b.Navigation("Patient");

                    b.Navigation("Technician");
                });

            modelBuilder.Entity("Freshx_API.Models.Bill", b =>
                {
                    b.Navigation("BillDetails");

                    b.Navigation("Payments");
                });

            modelBuilder.Entity("Freshx_API.Models.Conversation", b =>
                {
                    b.Navigation("Messages");
                });

            modelBuilder.Entity("Freshx_API.Models.Doctor", b =>
                {
                    b.Navigation("Receptions");
                });

            modelBuilder.Entity("Freshx_API.Models.Examine", b =>
                {
                    b.Navigation("MedicalServiceRequests");
                });

            modelBuilder.Entity("Freshx_API.Models.Prescription", b =>
                {
                    b.Navigation("PrescriptionDetails");
                });

            modelBuilder.Entity("Freshx_API.Models.Province", b =>
                {
                    b.Navigation("Districts");
                });

            modelBuilder.Entity("Freshx_API.Models.Reception", b =>
                {
                    b.Navigation("MedicalServiceRequest");
                });

            modelBuilder.Entity("Freshx_API.Models.ServiceCatalog", b =>
                {
                    b.Navigation("ChildServices");

                    b.Navigation("ServiceStandardValues");
                });

            modelBuilder.Entity("Freshx_API.Models.ServiceGroup", b =>
                {
                    b.Navigation("ServiceCatalogs");
                });

            modelBuilder.Entity("Freshx_API.Models.TemplatePrescription", b =>
                {
                    b.Navigation("DrugCatalogs");
                });
#pragma warning restore 612, 618
        }
    }
}
