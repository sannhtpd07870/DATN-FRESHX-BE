// <auto-generated />
using System;
using Freshx_API.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Freshx_API.Migrations
{
    [DbContext(typeof(FreshxDBContext))]
    [Migration("20241219061522_ServiceCatalogUpdateDataField2")]
    partial class ServiceCatalogUpdateDataField2
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Freshx_API.Models.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ExpiredTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Freshx_API.Models.Appointment", b =>
                {
                    b.Property<int>("AppointmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AppointmentId"));

                    b.Property<DateTime?>("AppointmentTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("MedicalExaminationId")
                        .HasColumnType("int");

                    b.Property<int?>("PatientId")
                        .HasColumnType("int");

                    b.Property<int?>("ReceptionId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("SentTime")
                        .HasColumnType("datetime2");

                    b.HasKey("AppointmentId");

                    b.HasIndex("MedicalExaminationId");

                    b.HasIndex("PatientId");

                    b.HasIndex("ReceptionId");

                    b.ToTable("Appointments");
                });

            modelBuilder.Entity("Freshx_API.Models.ConclusionDictionary", b =>
                {
                    b.Property<int>("ConclusionDictionaryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ConclusionDictionaryId"));

                    b.Property<bool?>("CalculateDueDate")
                        .HasColumnType("bit");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Conclusion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Diagnosis")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Gender")
                        .HasColumnType("int");

                    b.Property<int?>("IsDeleted")
                        .HasColumnType("int");

                    b.Property<int?>("IsSuspended")
                        .HasColumnType("int");

                    b.Property<string>("MedicalAdvice")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SequenceNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ServiceCatalogId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ConclusionDictionaryId");

                    b.HasIndex("ServiceCatalogId");

                    b.ToTable("ConclusionDictionaries");
                });

            modelBuilder.Entity("Freshx_API.Models.Country", b =>
                {
                    b.Property<int>("CountryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CountryId"));

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("IsDeleted")
                        .HasColumnType("int");

                    b.Property<int?>("IsSuspended")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameEnglish")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameLatin")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShortName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("CountryId");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("Freshx_API.Models.Department", b =>
                {
                    b.Property<int>("DepartmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DepartmentId"));

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DepartmentTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("IsDeleted")
                        .HasColumnType("int");

                    b.Property<int?>("IsSuspended")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("DepartmentId");

                    b.HasIndex("DepartmentTypeId");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("Freshx_API.Models.DepartmentType", b =>
                {
                    b.Property<int>("DepartmentTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DepartmentTypeId"));

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("IsDeleted")
                        .HasColumnType("int");

                    b.Property<int?>("IsSuspended")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("DepartmentTypeId");

                    b.ToTable("DepartmentTypes");
                });

            modelBuilder.Entity("Freshx_API.Models.DiagnosisDictionary", b =>
                {
                    b.Property<int>("DiagnosisDictionaryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DiagnosisDictionaryId"));

                    b.Property<bool?>("CalculateDueDate")
                        .HasColumnType("bit");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Diagnosis")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("IsDeleted")
                        .HasColumnType("int");

                    b.Property<int?>("IsSuspended")
                        .HasColumnType("int");

                    b.Property<string>("MedicalAdvice")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SequenceNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("DiagnosisDictionaryId");

                    b.ToTable("DiagnosisDictionaries");
                });

            modelBuilder.Entity("Freshx_API.Models.DiagnosticImagingResult", b =>
                {
                    b.Property<int>("DiagnosticImagingResultId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DiagnosticImagingResultId"));

                    b.Property<int?>("ConcludingDoctorId")
                        .HasColumnType("int");

                    b.Property<string>("Conclusion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Diagnosis")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ExecutionDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ExecutionTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("GpbmacroDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GpbmicroDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Instruction")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("IsDeleted")
                        .HasColumnType("int");

                    b.Property<int?>("IsSampleCollectedAtHome")
                        .HasColumnType("int");

                    b.Property<int?>("MedicalServiceRequestId")
                        .HasColumnType("int");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OtherComment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PatientId")
                        .HasColumnType("int");

                    b.Property<int?>("ReceptionId")
                        .HasColumnType("int");

                    b.Property<string>("Result")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ResultTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("SampleCollectionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SampleCollectionLocation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SampleCollectionLocationMedicalFacilityId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("SampleCollectionTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("SampleCollectorId")
                        .HasColumnType("int");

                    b.Property<int?>("SampleQualityId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("SampleReceivedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("SampleReceivedTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("SampleTypeId")
                        .HasColumnType("int");

                    b.Property<string>("SpouseName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SpouseYearOfBirth")
                        .HasColumnType("int");

                    b.Property<int?>("TechnicianId")
                        .HasColumnType("int");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("DiagnosticImagingResultId");

                    b.HasIndex("ConcludingDoctorId");

                    b.HasIndex("MedicalServiceRequestId");

                    b.HasIndex("PatientId");

                    b.HasIndex("ReceptionId");

                    b.HasIndex("SampleCollectorId");

                    b.HasIndex("TechnicianId");

                    b.ToTable("DiagnosticImagingResults");
                });

            modelBuilder.Entity("Freshx_API.Models.DiagnosticImagingResultImage", b =>
                {
                    b.Property<int>("DiagnosticImagingResultImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DiagnosticImagingResultImageId"));

                    b.Property<int?>("DiagnosticImagingResultId")
                        .HasColumnType("int");

                    b.Property<int?>("IsDeleted")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DiagnosticImagingResultImageId");

                    b.HasIndex("DiagnosticImagingResultId");

                    b.ToTable("DiagnosticImagingResultImages");
                });

            modelBuilder.Entity("Freshx_API.Models.Dictionary", b =>
                {
                    b.Property<int>("DictionaryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DictionaryId"));

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description3")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description4")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description5")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("IsDeleted")
                        .HasColumnType("int");

                    b.Property<int?>("IsSuspended")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("NameId")
                        .HasColumnType("int");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("DictionaryId");

                    b.ToTable("Dictionaries");
                });

            modelBuilder.Entity("Freshx_API.Models.DiseaseGroup", b =>
                {
                    b.Property<int>("DiseaseGroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DiseaseGroupId"));

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("IsDeleted")
                        .HasColumnType("int");

                    b.Property<int?>("IsSuspended")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("DiseaseGroupId");

                    b.ToTable("DiseaseGroups");
                });

            modelBuilder.Entity("Freshx_API.Models.District", b =>
                {
                    b.Property<string>("Code")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int?>("AdministrativeUnitId")
                        .HasColumnType("int");

                    b.Property<string>("CodeName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int?>("CountryId")
                        .HasColumnType("int");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("FullNameEn")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("NameEn")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("ProvinceCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Code");

                    b.HasIndex("ProvinceCode");

                    b.ToTable("Districts");
                });

            modelBuilder.Entity("Freshx_API.Models.Doctor", b =>
                {
                    b.Property<int>("DoctorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DoctorId"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("IsDeleted")
                        .HasColumnType("int");

                    b.Property<int?>("IsSuspended")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Specialty")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("DoctorId");

                    b.ToTable("Doctors");
                });

            modelBuilder.Entity("Freshx_API.Models.DoctorsCommonIcd", b =>
                {
                    b.Property<int>("DoctorsCommonIcdid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DoctorsCommonIcdid"));

                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.Property<int>("ICDCatalogId")
                        .HasColumnType("int");

                    b.HasKey("DoctorsCommonIcdid");

                    b.HasIndex("DoctorId");

                    b.HasIndex("ICDCatalogId");

                    b.ToTable("DoctorsCommonIcds");
                });

            modelBuilder.Entity("Freshx_API.Models.Document", b =>
                {
                    b.Property<int>("DocumentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DocumentId"));

                    b.Property<string>("AccountingDocument")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ApproverId")
                        .HasColumnType("int");

                    b.Property<int?>("ChiefAccountantId")
                        .HasColumnType("int");

                    b.Property<int?>("CorrespondingPharmacyId")
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreditAccount")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CurrencyId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DebitAccount")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DeductibleRequisitionFormId")
                        .HasColumnType("int");

                    b.Property<int?>("DelivererId")
                        .HasColumnType("int");

                    b.Property<int?>("DeliveryUnitId")
                        .HasColumnType("int");

                    b.Property<int?>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("DiscountAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("DiscountRate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("DoctorId")
                        .HasColumnType("int");

                    b.Property<string>("DocumentCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DocumentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DocumentNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DocumentPurposeId")
                        .HasColumnType("int");

                    b.Property<int?>("DocumentStatus")
                        .HasColumnType("int");

                    b.Property<string>("DocumentType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DrugSourceId")
                        .HasColumnType("int");

                    b.Property<decimal?>("ExchangeRate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("ExecutionPharmacyId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ForeignInvoiceDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ForeignInvoiceNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ForeignSerialNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FormCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GeneratedTransactionDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("HasReceivedMedication")
                        .HasColumnType("bit");

                    b.Property<decimal?>("ImportVatamount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("ImportVatrate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("InpatientPrescriptionId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("InputDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("InputterId")
                        .HasColumnType("int");

                    b.Property<int?>("InspectorId")
                        .HasColumnType("int");

                    b.Property<string>("InvoiceNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("IsDeleted")
                        .HasColumnType("int");

                    b.Property<bool?>("IsHealthInsurance")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsHospitalFee")
                        .HasColumnType("bit");

                    b.Property<int?>("IssuingPharmacyId")
                        .HasColumnType("int");

                    b.Property<string>("MaterialTypeId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("MedicalExaminationId")
                        .HasColumnType("int");

                    b.Property<int?>("MedicalRecordId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("OriginalDocumentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("OriginalDocumentNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PaymentMethodId")
                        .HasColumnType("int");

                    b.Property<decimal?>("PaymentValue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("ReceiverId")
                        .HasColumnType("int");

                    b.Property<int?>("ReceivingPharmacyId")
                        .HasColumnType("int");

                    b.Property<string>("ReferenceDocumentCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReferenceDocumentType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ReferralDoctorId")
                        .HasColumnType("int");

                    b.Property<int?>("RelatedDocumentId")
                        .HasColumnType("int");

                    b.Property<int?>("RequisitionFormId")
                        .HasColumnType("int");

                    b.Property<string>("SerialNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SupplierId")
                        .HasColumnType("int");

                    b.Property<int?>("TargetObjectId")
                        .HasColumnType("int");

                    b.Property<decimal?>("TaxAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("TaxRate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("TotalValue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("TransferId")
                        .HasColumnType("int");

                    b.Property<int?>("TransferPaymentId")
                        .HasColumnType("int");

                    b.Property<int?>("TreasurerId")
                        .HasColumnType("int");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UsagePharmacyId")
                        .HasColumnType("int");

                    b.Property<decimal?>("Vatamount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("Vatrate")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("DocumentId");

                    b.HasIndex("ApproverId");

                    b.HasIndex("ChiefAccountantId");

                    b.HasIndex("CorrespondingPharmacyId");

                    b.HasIndex("DelivererId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("DoctorId");

                    b.HasIndex("DocumentPurposeId");

                    b.HasIndex("ExecutionPharmacyId");

                    b.HasIndex("InputterId");

                    b.HasIndex("InspectorId");

                    b.HasIndex("IssuingPharmacyId");

                    b.HasIndex("MedicalExaminationId");

                    b.HasIndex("ReceiverId");

                    b.HasIndex("ReceivingPharmacyId");

                    b.HasIndex("ReferralDoctorId");

                    b.HasIndex("RelatedDocumentId");

                    b.HasIndex("SupplierId");

                    b.HasIndex("TreasurerId");

                    b.HasIndex("UsagePharmacyId");

                    b.ToTable("Documents");
                });

            modelBuilder.Entity("Freshx_API.Models.DocumentDetail", b =>
                {
                    b.Property<int>("DocumentDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DocumentDetailId"));

                    b.Property<string>("AccountingDocumentNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("ActualQuantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("BookNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CashDocumentNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ControlNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("CostPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("CostPriceIncludingVat")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CurrencyId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DocumentId")
                        .HasColumnType("int");

                    b.Property<int>("DrugCatalogId")
                        .HasColumnType("int");

                    b.Property<decimal?>("ExchangeRate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("FreeReasonId")
                        .HasColumnType("int");

                    b.Property<bool>("HasGeneratedIssueDocument")
                        .HasColumnType("bit");

                    b.Property<bool>("HasGeneratedReturnDocument")
                        .HasColumnType("bit");

                    b.Property<int?>("ImportLotNumberId")
                        .HasColumnType("int");

                    b.Property<bool>("IsFree")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsLotSplit")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPromotion")
                        .HasColumnType("bit");

                    b.Property<decimal?>("IssuedQuantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("OrderId")
                        .HasColumnType("int");

                    b.Property<decimal?>("OriginalQuantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("OriginalUnitOfMeasureId")
                        .HasColumnType("int");

                    b.Property<decimal?>("PaymentPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("PurchasePrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("RequestedQuantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("SellingPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("SourceId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("TotalCostAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("TotalPurchaseAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("UnitOfMeasureId")
                        .HasColumnType("int");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("Vatamount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("VatinvoiceNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("Vatrate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("VisaNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DocumentDetailId");

                    b.HasIndex("DocumentId");

                    b.HasIndex("DrugCatalogId");

                    b.HasIndex("OriginalUnitOfMeasureId");

                    b.HasIndex("UnitOfMeasureId");

                    b.ToTable("DocumentDetails");
                });

            modelBuilder.Entity("Freshx_API.Models.DocumentPurpose", b =>
                {
                    b.Property<int>("DocumentPurposeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DocumentPurposeId"));

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DocumentPurposeId");

                    b.ToTable("DocumentPurposes");
                });

            modelBuilder.Entity("Freshx_API.Models.DrugBooking", b =>
                {
                    b.Property<int>("DrugBookingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DrugBookingId"));

                    b.Property<string>("Action")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("AfternoonDose")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("DaysOfSupply")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("DrugCatalogId")
                        .HasColumnType("int");

                    b.Property<decimal?>("EveningDose")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("LoginSessionId")
                        .HasColumnType("int");

                    b.Property<int?>("MedicalExaminationId")
                        .HasColumnType("int");

                    b.Property<decimal?>("MorningDose")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("NoonDose")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PrescriptionId")
                        .HasColumnType("int");

                    b.Property<decimal?>("Quantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.Property<decimal?>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("DrugBookingId");

                    b.HasIndex("DrugCatalogId");

                    b.HasIndex("LoginSessionId");

                    b.HasIndex("MedicalExaminationId");

                    b.HasIndex("PrescriptionId");

                    b.ToTable("DrugBookings");
                });

            modelBuilder.Entity("Freshx_API.Models.DrugCatalog", b =>
                {
                    b.Property<int>("DrugCatalogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DrugCatalogId"));

                    b.Property<string>("ActiveIngredient")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("CostPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("CountryId")
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DepartmentPharmacyId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Dosage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DrugClassification")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DrugTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Effect")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("IsDeleted")
                        .HasColumnType("int");

                    b.Property<int?>("IsSuspended")
                        .HasColumnType("int");

                    b.Property<int?>("ManagementPharmacyId")
                        .HasColumnType("int");

                    b.Property<int?>("ManufacturerId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameUnaccented")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NationalDrugCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Note1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Note2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Note3")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("QuantityImported")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("QuantityInStock")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ReferenceNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RouteOfAdministration")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UnitOfMeasureId")
                        .HasColumnType("int");

                    b.Property<decimal?>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Usage")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DrugCatalogId");

                    b.HasIndex("CountryId");

                    b.HasIndex("DepartmentPharmacyId");

                    b.HasIndex("DrugTypeId");

                    b.HasIndex("ManagementPharmacyId");

                    b.HasIndex("ManufacturerId");

                    b.HasIndex("UnitOfMeasureId");

                    b.ToTable("DrugCatalogs");
                });

            modelBuilder.Entity("Freshx_API.Models.DrugType", b =>
                {
                    b.Property<int>("DrugTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DrugTypeId"));

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("IsDeleted")
                        .HasColumnType("int");

                    b.Property<int?>("IsSuspended")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("DrugTypeId");

                    b.ToTable("DrugTypes");
                });

            modelBuilder.Entity("Freshx_API.Models.EinvoiceFile", b =>
                {
                    b.Property<int>("EinvoiceFileId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EinvoiceFileId"));

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FilePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("InvoiceId")
                        .HasColumnType("int");

                    b.Property<int?>("PatientId")
                        .HasColumnType("int");

                    b.HasKey("EinvoiceFileId");

                    b.HasIndex("InvoiceId");

                    b.HasIndex("PatientId");

                    b.ToTable("EinvoiceFiles");
                });

            modelBuilder.Entity("Freshx_API.Models.EmailAccount", b =>
                {
                    b.Property<int>("EmailAccountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EmailAccountId"));

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmailAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("IsDeleted")
                        .HasColumnType("int");

                    b.Property<int?>("IsSuspended")
                        .HasColumnType("int");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("EmailAccountId");

                    b.ToTable("EmailAccounts");
                });

            modelBuilder.Entity("Freshx_API.Models.EmailContent", b =>
                {
                    b.Property<int>("EmailContentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EmailContentId"));

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SenderId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("SentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Subject")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EmailContentId");

                    b.HasIndex("SenderId");

                    b.ToTable("EmailContents");
                });

            modelBuilder.Entity("Freshx_API.Models.EmailContentImage", b =>
                {
                    b.Property<int>("EmailContentImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EmailContentImageId"));

                    b.Property<int?>("EmailContentId")
                        .HasColumnType("int");

                    b.Property<string>("ImageName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("IsDeleted")
                        .HasColumnType("int");

                    b.HasKey("EmailContentImageId");

                    b.HasIndex("EmailContentId");

                    b.ToTable("EmailContentImages");
                });

            modelBuilder.Entity("Freshx_API.Models.Employee", b =>
                {
                    b.Property<int>("EmployeeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EmployeeId"));

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<string>("DistrictCode")
                        .HasColumnType("nvarchar(20)");

                    b.Property<int?>("DistrictId")
                        .HasColumnType("int");

                    b.Property<string>("EmployeeCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateOnly?>("IssuanceDate")
                        .HasColumnType("date");

                    b.Property<string>("IssuancePlace")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PositionId")
                        .HasColumnType("int");

                    b.Property<string>("ProfessionalCertificate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProvinceCode")
                        .HasColumnType("nvarchar(20)");

                    b.Property<int?>("ProvinceId")
                        .HasColumnType("int");

                    b.Property<int?>("TitleId")
                        .HasColumnType("int");

                    b.Property<string>("WardCode")
                        .HasColumnType("nvarchar(20)");

                    b.Property<int?>("WardId")
                        .HasColumnType("int");

                    b.HasKey("EmployeeId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("DistrictCode");

                    b.HasIndex("ProvinceCode");

                    b.HasIndex("WardCode");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("Freshx_API.Models.ExaminationConfirmation", b =>
                {
                    b.Property<int>("ExaminationConfirmationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ExaminationConfirmationId"));

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("IsDeleted")
                        .HasColumnType("int");

                    b.Property<int?>("MedicalExaminationId")
                        .HasColumnType("int");

                    b.Property<int?>("MedicalExaminationInvoiceId")
                        .HasColumnType("int");

                    b.Property<int?>("ReceptionId")
                        .HasColumnType("int");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ExaminationConfirmationId");

                    b.HasIndex("MedicalExaminationId");

                    b.HasIndex("MedicalExaminationInvoiceId");

                    b.HasIndex("ReceptionId");

                    b.ToTable("ExaminationConfirmations");
                });

            modelBuilder.Entity("Freshx_API.Models.Hospital", b =>
                {
                    b.Property<int>("HospitalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("HospitalId"));

                    b.Property<string>("Address1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Address2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Address3")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("IsDeleted")
                        .HasColumnType("int");

                    b.Property<int?>("IsSuspended")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber3")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("HospitalId");

                    b.ToTable("Hospitals");
                });

            modelBuilder.Entity("Freshx_API.Models.ICDCatalog", b =>
                {
                    b.Property<int>("ICDCatalogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ICDCatalogId"));

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ICDCatalogGroupId")
                        .HasColumnType("int");

                    b.Property<bool>("IsInfectious")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsSuspended")
                        .HasColumnType("bit");

                    b.Property<int?>("LegacyCode")
                        .HasColumnType("int");

                    b.Property<string>("Level")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameEnglish")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameRussian")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameUnaccented")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Subgroup")
                        .HasColumnType("nvarchar(max)");

                    b.Property<short?>("Type")
                        .HasColumnType("smallint");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ICDCatalogId");

                    b.HasIndex("ICDCatalogGroupId");

                    b.ToTable("ICDcatalogs");
                });

            modelBuilder.Entity("Freshx_API.Models.Icdchapter", b =>
                {
                    b.Property<int>("IcdchapterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IcdchapterId"));

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsSuspended")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameEnglish")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameRussian")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameUnaccented")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("IcdchapterId");

                    b.ToTable("Icdchapters");
                });

            modelBuilder.Entity("Freshx_API.Models.InventoryType", b =>
                {
                    b.Property<int>("InventoryTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InventoryTypeId"));

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("InventoryTypeId");

                    b.ToTable("InventoryTypes");
                });

            modelBuilder.Entity("Freshx_API.Models.Invoice", b =>
                {
                    b.Property<int>("InvoiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InvoiceId"));

                    b.Property<string>("Bmi")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Comorbidities")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ComorbidityCodes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ComorbidityNames")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Conclusion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Diagnosis")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExaminationDetails")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExaminationNote")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("FollowUpAppointment")
                        .HasColumnType("datetime2");

                    b.Property<string>("FollowUpAppointmentNote")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ICDCatalogId")
                        .HasColumnType("int");

                    b.Property<string>("InvoiceNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InvoiceType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("IsDeleted")
                        .HasColumnType("int");

                    b.Property<string>("LabSummary")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MedicalAdvice")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MedicalExaminationId")
                        .HasColumnType("int");

                    b.Property<string>("MedicalHistory")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PatientId")
                        .HasColumnType("int");

                    b.Property<string>("PrescriptionNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReasonForVisit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ReceptionId")
                        .HasColumnType("int");

                    b.Property<string>("RespiratoryRate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Symptoms")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TreatmentDetails")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("VatinvoiceNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("InvoiceId");

                    b.HasIndex("ICDCatalogId");

                    b.HasIndex("PatientId");

                    b.HasIndex("ReceptionId");

                    b.ToTable("Invoices");
                });

            modelBuilder.Entity("Freshx_API.Models.LabResult", b =>
                {
                    b.Property<int>("LabResultId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LabResultId"));

                    b.Property<int?>("ConcludingDoctorId")
                        .HasColumnType("int");

                    b.Property<string>("Conclusion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Diagnosis")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ExecutionDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ExecutionTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Instruction")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("IsDeleted")
                        .HasColumnType("int");

                    b.Property<int?>("IsSampleCollectedAtHome")
                        .HasColumnType("int");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PatientId")
                        .HasColumnType("int");

                    b.Property<int?>("ReceptionId")
                        .HasColumnType("int");

                    b.Property<string>("Result")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ResultTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("SampleCollectionDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("SampleCollectionLocationMedicalFacilityId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("SampleCollectionTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("SampleQualityId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("SampleReceivedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("SampleReceivedTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("SampleTypeId")
                        .HasColumnType("int");

                    b.Property<string>("SpouseName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SpouseYearOfBirth")
                        .HasColumnType("int");

                    b.Property<int?>("TechnicianId")
                        .HasColumnType("int");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("LabResultId");

                    b.HasIndex("ConcludingDoctorId");

                    b.HasIndex("PatientId");

                    b.HasIndex("ReceptionId");

                    b.HasIndex("TechnicianId");

                    b.ToTable("LabResults");
                });

            modelBuilder.Entity("Freshx_API.Models.LabTestFile", b =>
                {
                    b.Property<int>("LabTestFileId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LabTestFileId"));

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FilePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PatientId")
                        .HasColumnType("int");

                    b.Property<int?>("ReceptionId")
                        .HasColumnType("int");

                    b.HasKey("LabTestFileId");

                    b.HasIndex("PatientId");

                    b.HasIndex("ReceptionId");

                    b.ToTable("LabTestFiles");
                });

            modelBuilder.Entity("Freshx_API.Models.LoginSession", b =>
                {
                    b.Property<int>("LoginSessionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LoginSessionId"));

                    b.Property<int?>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<string>("Ipaddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LoginTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LogoutTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Macaddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PharmacyId")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginSessionId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("PharmacyId");

                    b.HasIndex("UserId");

                    b.ToTable("LoginSessions");
                });

            modelBuilder.Entity("Freshx_API.Models.MedicalServiceRequest", b =>
                {
                    b.Property<int>("MedicalServiceRequestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MedicalServiceRequestId"));

                    b.Property<int?>("AssignedById")
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ExecutionDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ExecutionTime")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("IsApproved")
                        .HasColumnType("bit");

                    b.Property<int?>("IsDeleted")
                        .HasColumnType("int");

                    b.Property<bool?>("IsPaid")
                        .HasColumnType("bit");

                    b.Property<string>("NumberOfTubes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ParentMedicalServiceRequestId")
                        .HasColumnType("int");

                    b.Property<int?>("PatientId")
                        .HasColumnType("int");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int");

                    b.Property<int?>("ReceptionId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("RequestDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("RequestNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RequestTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Result")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("SampleCollectionDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("SampleCollectionTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("SampleCollectorId")
                        .HasColumnType("int");

                    b.Property<int?>("ServiceId")
                        .HasColumnType("int");

                    b.Property<decimal?>("ServiceTotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("ServiceUnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Sid")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("MedicalServiceRequestId");

                    b.HasIndex("AssignedById");

                    b.HasIndex("ParentMedicalServiceRequestId");

                    b.HasIndex("PatientId");

                    b.HasIndex("ReceptionId");

                    b.HasIndex("SampleCollectorId");

                    b.HasIndex("ServiceId");

                    b.ToTable("MedicalServiceRequests");
                });

            modelBuilder.Entity("Freshx_API.Models.Menu", b =>
                {
                    b.Property<int>("MenuId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MenuId"));

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("IsDeleted")
                        .HasColumnType("int");

                    b.Property<int?>("IsSuspended")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ParentMenuId")
                        .HasColumnType("int");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("MenuId");

                    b.HasIndex("ParentMenuId");

                    b.ToTable("Menus");
                });

            modelBuilder.Entity("Freshx_API.Models.MenuPermission", b =>
                {
                    b.Property<int>("MenuPermissionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MenuPermissionId"));

                    b.Property<int?>("MenuId")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("MenuPermissionId");

                    b.HasIndex("MenuId");

                    b.HasIndex("UserId");

                    b.ToTable("MenuPermissions");
                });

            modelBuilder.Entity("Freshx_API.Models.Patient", b =>
                {
                    b.Property<int>("PatientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PatientId"));

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AdmissionNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<string>("Ethnicity")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IdentityCardNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("IsDeleted")
                        .HasColumnType("int");

                    b.Property<string>("MedicalRecordNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("PatientId");

                    b.ToTable("Patients");
                });

            modelBuilder.Entity("Freshx_API.Models.Pharmacy", b =>
                {
                    b.Property<int>("PharmacyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PharmacyId"));

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CostCenterId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<int?>("InventoryTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("IsDeleted")
                        .HasColumnType("int");

                    b.Property<bool?>("IsSourceManagement")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsSuspended")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameUnaccented")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SpecialtyId")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("PharmacyId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("InventoryTypeId");

                    b.ToTable("Pharmacies");
                });

            modelBuilder.Entity("Freshx_API.Models.Prescription", b =>
                {
                    b.Property<int>("PrescriptionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PrescriptionId"));

                    b.Property<decimal?>("AfternoonDose")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("DaysOfSupply")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("DispensedQuantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("DrugCatalogId")
                        .HasColumnType("int");

                    b.Property<decimal?>("EveningDose")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("IsDeleted")
                        .HasColumnType("int");

                    b.Property<bool?>("IsDispensed")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsPaid")
                        .HasColumnType("bit");

                    b.Property<int?>("MedicalExaminationId")
                        .HasColumnType("int");

                    b.Property<decimal?>("MorningDose")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("NoonDose")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PrescriptionNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("Quantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("PrescriptionId");

                    b.HasIndex("DrugCatalogId");

                    b.HasIndex("MedicalExaminationId");

                    b.ToTable("Prescriptions");
                });

            modelBuilder.Entity("Freshx_API.Models.PriceType", b =>
                {
                    b.Property<int>("PriceTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PriceTypeId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PriceTypeId");

                    b.ToTable("PriceTypes");
                });

            modelBuilder.Entity("Freshx_API.Models.Province", b =>
                {
                    b.Property<string>("Code")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int?>("AdministrativeRegionId")
                        .HasColumnType("int");

                    b.Property<int?>("AdministrativeUnitId")
                        .HasColumnType("int");

                    b.Property<string>("CodeName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("FullNameEn")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("NameEn")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Code");

                    b.ToTable("Provinces");
                });

            modelBuilder.Entity("Freshx_API.Models.Reception", b =>
                {
                    b.Property<int>("ReceptionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReceptionId"));

                    b.Property<int?>("AssignedDoctorId")
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("IsDeleted")
                        .HasColumnType("int");

                    b.Property<bool?>("IsPriority")
                        .HasColumnType("bit");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PatientId")
                        .HasColumnType("int");

                    b.Property<string>("ReasonForVisit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ReceptionDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ReceptionLocationId")
                        .HasColumnType("int");

                    b.Property<string>("ReceptionNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ReceptionistId")
                        .HasColumnType("int");

                    b.Property<int?>("SequenceNumber")
                        .HasColumnType("int");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ReceptionId");

                    b.HasIndex("AssignedDoctorId");

                    b.HasIndex("PatientId");

                    b.HasIndex("ReceptionistId");

                    b.ToTable("Receptions");
                });

            modelBuilder.Entity("Freshx_API.Models.Receptionist", b =>
                {
                    b.Property<int>("ReceptionistId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReceptionistId"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("IsDeleted")
                        .HasColumnType("int");

                    b.Property<int?>("IsSuspended")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ReceptionistId");

                    b.ToTable("Receptionists");
                });

            modelBuilder.Entity("Freshx_API.Models.Report", b =>
                {
                    b.Property<int>("ReportId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReportId"));

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("IsDeleted")
                        .HasColumnType("int");

                    b.Property<int?>("IsSuspended")
                        .HasColumnType("int");

                    b.Property<string>("ProcedureName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReportCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReportFile")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReportName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ReportId");

                    b.ToTable("Reports");
                });

            modelBuilder.Entity("Freshx_API.Models.ReportParameter", b =>
                {
                    b.Property<int>("ReportParameterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReportParameterId"));

                    b.Property<string>("DisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ItemType")
                        .HasColumnType("int");

                    b.Property<int?>("LoadType")
                        .HasColumnType("int");

                    b.Property<int?>("NumericalOrder")
                        .HasColumnType("int");

                    b.Property<string>("ParameterName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ReportId")
                        .HasColumnType("int");

                    b.Property<int>("TypeOfControlInputId")
                        .HasColumnType("int");

                    b.Property<int?>("ValueIntCheckBoxFalse")
                        .HasColumnType("int");

                    b.Property<int?>("ValueIntCheckBoxTrue")
                        .HasColumnType("int");

                    b.Property<string>("ValueStringCheckBoxFalse")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ValueStringCheckBoxTrue")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ReportParameterId");

                    b.HasIndex("ReportId");

                    b.HasIndex("TypeOfControlInputId");

                    b.ToTable("ReportParameters");
                });

            modelBuilder.Entity("Freshx_API.Models.ReportPermission", b =>
                {
                    b.Property<int>("ReportPermissionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReportPermissionId"));

                    b.Property<int?>("ReportId")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("ReportPermissionId");

                    b.HasIndex("ReportId");

                    b.HasIndex("UserId");

                    b.ToTable("ReportPermissions");
                });

            modelBuilder.Entity("Freshx_API.Models.Savefile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("FileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FilePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UploadDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Savefiles");
                });

            modelBuilder.Entity("Freshx_API.Models.ServiceCatalog", b =>
                {
                    b.Property<int>("ServiceCatalogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ServiceCatalogId"));

                    b.Property<string>("Code")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("HasStandardValue")
                        .HasColumnType("bit");

                    b.Property<int?>("IsDeleted")
                        .HasColumnType("int");

                    b.Property<bool?>("IsParentService")
                        .HasColumnType("bit");

                    b.Property<int>("IsSuspended")
                        .HasColumnType("int");

                    b.Property<int?>("Level")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("ParentServiceId")
                        .HasColumnType("int");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int?>("ServiceCatalogId1")
                        .HasColumnType("int");

                    b.Property<int?>("ServiceGroupId")
                        .HasColumnType("int");

                    b.Property<int?>("ServiceGroupId1")
                        .HasColumnType("int");

                    b.Property<string>("UnitOfMeasure")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ServiceCatalogId");

                    b.HasIndex("ParentServiceId");

                    b.HasIndex("ServiceCatalogId1");

                    b.HasIndex("ServiceGroupId");

                    b.HasIndex("ServiceGroupId1");

                    b.ToTable("ServiceCatalogs");
                });

            modelBuilder.Entity("Freshx_API.Models.ServiceGroup", b =>
                {
                    b.Property<int>("ServiceGroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ServiceGroupId"));

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("IsDeleted")
                        .HasColumnType("int");

                    b.Property<int?>("IsSuspended")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ServiceGroupId");

                    b.ToTable("ServiceGroups");
                });

            modelBuilder.Entity("Freshx_API.Models.ServiceStandardValue", b =>
                {
                    b.Property<int>("ServiceStandardValueId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ServiceStandardValueId"));

                    b.Property<string>("ChildrenMaximum")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ChildrenMinimum")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CommonValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FemaleMaximum")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FemaleMinimum")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("IsDeleted")
                        .HasColumnType("int");

                    b.Property<bool?>("IsGreaterThanOrEqualToMaximum")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsLessThanOrEqualToMinimum")
                        .HasColumnType("bit");

                    b.Property<int?>("IsSuspended")
                        .HasColumnType("int");

                    b.Property<string>("MaleMaximum")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MaleMinimum")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ServiceCatalogId")
                        .HasColumnType("int");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ServiceStandardValueId");

                    b.HasIndex("ServiceCatalogId");

                    b.ToTable("ServiceStandardValues");
                });

            modelBuilder.Entity("Freshx_API.Models.Setting", b =>
                {
                    b.Property<int>("SettingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SettingId"));

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Date1")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Date2")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("IsDeleted")
                        .HasColumnType("int");

                    b.Property<int?>("IsSuspended")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Number1")
                        .HasColumnType("int");

                    b.Property<int?>("Number2")
                        .HasColumnType("int");

                    b.Property<string>("String1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("String2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("SettingId");

                    b.ToTable("Settings");
                });

            modelBuilder.Entity("Freshx_API.Models.Supplier", b =>
                {
                    b.Property<int>("SupplierId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SupplierId"));

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactPerson")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Director")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Fax")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsAssetSupplier")
                        .HasColumnType("bit");

                    b.Property<int?>("IsDeleted")
                        .HasColumnType("int");

                    b.Property<bool?>("IsForeign")
                        .HasColumnType("bit");

                    b.Property<bool>("IsMedicalConsumableSupplier")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPharmaceuticalSupplier")
                        .HasColumnType("bit");

                    b.Property<bool>("IsStateOwned")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSuspended")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameEnglish")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameRussian")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameUnaccented")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TaxCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("SupplierId");

                    b.ToTable("Suppliers");
                });

            modelBuilder.Entity("Freshx_API.Models.Technician", b =>
                {
                    b.Property<int>("TechnicianId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TechnicianId"));

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("IsDeleted")
                        .HasColumnType("int");

                    b.Property<int?>("IsSuspended")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("TechnicianId");

                    b.ToTable("Technicians");
                });

            modelBuilder.Entity("Freshx_API.Models.TemplatePrescription", b =>
                {
                    b.Property<int>("TemplatePrescriptionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TemplatePrescriptionId"));

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("IsDeleted")
                        .HasColumnType("int");

                    b.Property<int?>("IsSuspended")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("TemplatePrescriptionId");

                    b.ToTable("TemplatePrescriptions");
                });

            modelBuilder.Entity("Freshx_API.Models.TemplatePrescriptionDrugMapping", b =>
                {
                    b.Property<int>("TemplatePrescriptionDrugMappingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TemplatePrescriptionDrugMappingId"));

                    b.Property<decimal?>("AfternoonDose")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("DaysOfSupply")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("DrugCatalogId")
                        .HasColumnType("int");

                    b.Property<decimal?>("EveningDose")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("IsDeleted")
                        .HasColumnType("int");

                    b.Property<decimal?>("MorningDose")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("NoonDose")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("Quantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("TemplatePrescriptionId")
                        .HasColumnType("int");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("TemplatePrescriptionDrugMappingId");

                    b.HasIndex("DrugCatalogId");

                    b.HasIndex("TemplatePrescriptionId");

                    b.ToTable("TemplatePrescriptionDrugMappings");
                });

            modelBuilder.Entity("Freshx_API.Models.TypeOfControlInput", b =>
                {
                    b.Property<int>("TypeOfControlInputId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TypeOfControlInputId"));

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TypeOfControlInputId");

                    b.ToTable("TypeOfControlInputs");
                });

            modelBuilder.Entity("Freshx_API.Models.UnitOfMeasure", b =>
                {
                    b.Property<int>("UnitOfMeasureId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UnitOfMeasureId"));

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("ConversionValue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DrugType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("IsDeleted")
                        .HasColumnType("int");

                    b.Property<int?>("IsSuspended")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("UnitOfMeasureId");

                    b.ToTable("UnitOfMeasures");
                });

            modelBuilder.Entity("Freshx_API.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("HospitalId")
                        .HasColumnType("int");

                    b.Property<int?>("IsDeleted")
                        .HasColumnType("int");

                    b.Property<int?>("IsSuspended")
                        .HasColumnType("int");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.HasIndex("HospitalId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Freshx_API.Models.UserAction", b =>
                {
                    b.Property<int>("UserActionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserActionId"));

                    b.Property<string>("Action")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("LoginSessionId")
                        .HasColumnType("int");

                    b.Property<int?>("RequestObjectId")
                        .HasColumnType("int");

                    b.Property<int?>("ServiceId")
                        .HasColumnType("int");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.HasKey("UserActionId");

                    b.HasIndex("LoginSessionId");

                    b.HasIndex("ServiceId");

                    b.ToTable("UserActions");
                });

            modelBuilder.Entity("Freshx_API.Models.UserActionByMedicalRecord", b =>
                {
                    b.Property<int>("UserActionByMedicalRecordId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserActionByMedicalRecordId"));

                    b.Property<string>("Action")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ActionTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("AdmissionNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("LoginSessionId")
                        .HasColumnType("int");

                    b.Property<string>("MedicalRecordNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("UserActionByMedicalRecordId");

                    b.HasIndex("LoginSessionId");

                    b.HasIndex("UserId");

                    b.ToTable("UserActionByMedicalRecords");
                });

            modelBuilder.Entity("Freshx_API.Models.UserDepartment", b =>
                {
                    b.Property<int>("UserDepartmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserDepartmentId"));

                    b.Property<int?>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("UserDepartmentId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("UserId");

                    b.ToTable("UserDepartments");
                });

            modelBuilder.Entity("Freshx_API.Models.UserPharmacy", b =>
                {
                    b.Property<int>("UserPharmacyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserPharmacyId"));

                    b.Property<int?>("PharmacyId")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("UserPharmacyId");

                    b.HasIndex("PharmacyId");

                    b.HasIndex("UserId");

                    b.ToTable("UserPharmacies");
                });

            modelBuilder.Entity("Freshx_API.Models.Ward", b =>
                {
                    b.Property<string>("Code")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int?>("AdministrativeUnitId")
                        .HasColumnType("int");

                    b.Property<string>("CodeName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("DistrictCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("FullNameEn")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("NameEn")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Code");

                    b.HasIndex("DistrictCode");

                    b.ToTable("Wards");
                });

            modelBuilder.Entity("Freshx_API.Models.ZaloUser", b =>
                {
                    b.Property<int?>("RowNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("RowNumber"));

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Avatar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("District")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserIdByApp")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RowNumber");

                    b.ToTable("ZaloUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Freshx_API.Models.Appointment", b =>
                {
                    b.HasOne("Freshx_API.Models.Invoice", "MedicalExamination")
                        .WithMany()
                        .HasForeignKey("MedicalExaminationId");

                    b.HasOne("Freshx_API.Models.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId");

                    b.HasOne("Freshx_API.Models.Reception", "Reception")
                        .WithMany()
                        .HasForeignKey("ReceptionId");

                    b.Navigation("MedicalExamination");

                    b.Navigation("Patient");

                    b.Navigation("Reception");
                });

            modelBuilder.Entity("Freshx_API.Models.ConclusionDictionary", b =>
                {
                    b.HasOne("Freshx_API.Models.ServiceCatalog", "ServiceCatalog")
                        .WithMany()
                        .HasForeignKey("ServiceCatalogId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("ServiceCatalog");
                });

            modelBuilder.Entity("Freshx_API.Models.Department", b =>
                {
                    b.HasOne("Freshx_API.Models.DepartmentType", "DepartmentType")
                        .WithMany()
                        .HasForeignKey("DepartmentTypeId");

                    b.Navigation("DepartmentType");
                });

            modelBuilder.Entity("Freshx_API.Models.DiagnosticImagingResult", b =>
                {
                    b.HasOne("Freshx_API.Models.Doctor", "ConcludingDoctor")
                        .WithMany()
                        .HasForeignKey("ConcludingDoctorId");

                    b.HasOne("Freshx_API.Models.MedicalServiceRequest", "MedicalServiceRequest")
                        .WithMany()
                        .HasForeignKey("MedicalServiceRequestId");

                    b.HasOne("Freshx_API.Models.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId");

                    b.HasOne("Freshx_API.Models.Reception", "Reception")
                        .WithMany()
                        .HasForeignKey("ReceptionId");

                    b.HasOne("Freshx_API.Models.Employee", "SampleCollector")
                        .WithMany()
                        .HasForeignKey("SampleCollectorId");

                    b.HasOne("Freshx_API.Models.Technician", "Technician")
                        .WithMany()
                        .HasForeignKey("TechnicianId");

                    b.Navigation("ConcludingDoctor");

                    b.Navigation("MedicalServiceRequest");

                    b.Navigation("Patient");

                    b.Navigation("Reception");

                    b.Navigation("SampleCollector");

                    b.Navigation("Technician");
                });

            modelBuilder.Entity("Freshx_API.Models.DiagnosticImagingResultImage", b =>
                {
                    b.HasOne("Freshx_API.Models.DiagnosticImagingResult", "DiagnosticImagingResult")
                        .WithMany()
                        .HasForeignKey("DiagnosticImagingResultId");

                    b.Navigation("DiagnosticImagingResult");
                });

            modelBuilder.Entity("Freshx_API.Models.District", b =>
                {
                    b.HasOne("Freshx_API.Models.Province", "Province")
                        .WithMany("Districts")
                        .HasForeignKey("ProvinceCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Province");
                });

            modelBuilder.Entity("Freshx_API.Models.DoctorsCommonIcd", b =>
                {
                    b.HasOne("Freshx_API.Models.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Freshx_API.Models.ICDCatalog", "ICDCatalog")
                        .WithMany()
                        .HasForeignKey("ICDCatalogId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("ICDCatalog");
                });

            modelBuilder.Entity("Freshx_API.Models.Document", b =>
                {
                    b.HasOne("Freshx_API.Models.Employee", "Approver")
                        .WithMany()
                        .HasForeignKey("ApproverId");

                    b.HasOne("Freshx_API.Models.Employee", "ChiefAccountant")
                        .WithMany()
                        .HasForeignKey("ChiefAccountantId");

                    b.HasOne("Freshx_API.Models.Pharmacy", "CorrespondingPharmacy")
                        .WithMany()
                        .HasForeignKey("CorrespondingPharmacyId");

                    b.HasOne("Freshx_API.Models.Employee", "Deliverer")
                        .WithMany()
                        .HasForeignKey("DelivererId");

                    b.HasOne("Freshx_API.Models.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId");

                    b.HasOne("Freshx_API.Models.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId");

                    b.HasOne("Freshx_API.Models.DocumentPurpose", "DocumentPurpose")
                        .WithMany()
                        .HasForeignKey("DocumentPurposeId");

                    b.HasOne("Freshx_API.Models.Pharmacy", "ExecutionPharmacy")
                        .WithMany()
                        .HasForeignKey("ExecutionPharmacyId");

                    b.HasOne("Freshx_API.Models.Employee", "Inputter")
                        .WithMany()
                        .HasForeignKey("InputterId");

                    b.HasOne("Freshx_API.Models.Employee", "Inspector")
                        .WithMany()
                        .HasForeignKey("InspectorId");

                    b.HasOne("Freshx_API.Models.Pharmacy", "IssuingPharmacy")
                        .WithMany()
                        .HasForeignKey("IssuingPharmacyId");

                    b.HasOne("Freshx_API.Models.Invoice", "MedicalExamination")
                        .WithMany()
                        .HasForeignKey("MedicalExaminationId");

                    b.HasOne("Freshx_API.Models.Employee", "Receiver")
                        .WithMany()
                        .HasForeignKey("ReceiverId");

                    b.HasOne("Freshx_API.Models.Pharmacy", "ReceivingPharmacy")
                        .WithMany()
                        .HasForeignKey("ReceivingPharmacyId");

                    b.HasOne("Freshx_API.Models.Doctor", "ReferralDoctor")
                        .WithMany()
                        .HasForeignKey("ReferralDoctorId");

                    b.HasOne("Freshx_API.Models.Document", "RelatedDocument")
                        .WithMany()
                        .HasForeignKey("RelatedDocumentId");

                    b.HasOne("Freshx_API.Models.Supplier", "Supplier")
                        .WithMany()
                        .HasForeignKey("SupplierId");

                    b.HasOne("Freshx_API.Models.Employee", "Treasurer")
                        .WithMany()
                        .HasForeignKey("TreasurerId");

                    b.HasOne("Freshx_API.Models.Pharmacy", "UsagePharmacy")
                        .WithMany()
                        .HasForeignKey("UsagePharmacyId");

                    b.Navigation("Approver");

                    b.Navigation("ChiefAccountant");

                    b.Navigation("CorrespondingPharmacy");

                    b.Navigation("Deliverer");

                    b.Navigation("Department");

                    b.Navigation("Doctor");

                    b.Navigation("DocumentPurpose");

                    b.Navigation("ExecutionPharmacy");

                    b.Navigation("Inputter");

                    b.Navigation("Inspector");

                    b.Navigation("IssuingPharmacy");

                    b.Navigation("MedicalExamination");

                    b.Navigation("Receiver");

                    b.Navigation("ReceivingPharmacy");

                    b.Navigation("ReferralDoctor");

                    b.Navigation("RelatedDocument");

                    b.Navigation("Supplier");

                    b.Navigation("Treasurer");

                    b.Navigation("UsagePharmacy");
                });

            modelBuilder.Entity("Freshx_API.Models.DocumentDetail", b =>
                {
                    b.HasOne("Freshx_API.Models.Document", "Document")
                        .WithMany()
                        .HasForeignKey("DocumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Freshx_API.Models.DrugCatalog", "DrugCatalog")
                        .WithMany()
                        .HasForeignKey("DrugCatalogId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Freshx_API.Models.UnitOfMeasure", "OriginalUnitOfMeasure")
                        .WithMany()
                        .HasForeignKey("OriginalUnitOfMeasureId");

                    b.HasOne("Freshx_API.Models.UnitOfMeasure", "UnitOfMeasure")
                        .WithMany()
                        .HasForeignKey("UnitOfMeasureId");

                    b.Navigation("Document");

                    b.Navigation("DrugCatalog");

                    b.Navigation("OriginalUnitOfMeasure");

                    b.Navigation("UnitOfMeasure");
                });

            modelBuilder.Entity("Freshx_API.Models.DrugBooking", b =>
                {
                    b.HasOne("Freshx_API.Models.DrugCatalog", "DrugCatalog")
                        .WithMany()
                        .HasForeignKey("DrugCatalogId");

                    b.HasOne("Freshx_API.Models.LoginSession", "LoginSession")
                        .WithMany()
                        .HasForeignKey("LoginSessionId");

                    b.HasOne("Freshx_API.Models.Invoice", "MedicalExamination")
                        .WithMany()
                        .HasForeignKey("MedicalExaminationId");

                    b.HasOne("Freshx_API.Models.Prescription", "Prescription")
                        .WithMany()
                        .HasForeignKey("PrescriptionId");

                    b.Navigation("DrugCatalog");

                    b.Navigation("LoginSession");

                    b.Navigation("MedicalExamination");

                    b.Navigation("Prescription");
                });

            modelBuilder.Entity("Freshx_API.Models.DrugCatalog", b =>
                {
                    b.HasOne("Freshx_API.Models.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId");

                    b.HasOne("Freshx_API.Models.Pharmacy", "DepartmentPharmacy")
                        .WithMany()
                        .HasForeignKey("DepartmentPharmacyId");

                    b.HasOne("Freshx_API.Models.DrugType", "DrugType")
                        .WithMany()
                        .HasForeignKey("DrugTypeId");

                    b.HasOne("Freshx_API.Models.Pharmacy", "ManagementPharmacy")
                        .WithMany()
                        .HasForeignKey("ManagementPharmacyId");

                    b.HasOne("Freshx_API.Models.Supplier", "Manufacturer")
                        .WithMany()
                        .HasForeignKey("ManufacturerId");

                    b.HasOne("Freshx_API.Models.UnitOfMeasure", "UnitOfMeasure")
                        .WithMany()
                        .HasForeignKey("UnitOfMeasureId");

                    b.Navigation("Country");

                    b.Navigation("DepartmentPharmacy");

                    b.Navigation("DrugType");

                    b.Navigation("ManagementPharmacy");

                    b.Navigation("Manufacturer");

                    b.Navigation("UnitOfMeasure");
                });

            modelBuilder.Entity("Freshx_API.Models.EinvoiceFile", b =>
                {
                    b.HasOne("Freshx_API.Models.Invoice", "Invoice")
                        .WithMany()
                        .HasForeignKey("InvoiceId");

                    b.HasOne("Freshx_API.Models.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId");

                    b.Navigation("Invoice");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("Freshx_API.Models.EmailContent", b =>
                {
                    b.HasOne("Freshx_API.Models.Employee", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderId");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("Freshx_API.Models.EmailContentImage", b =>
                {
                    b.HasOne("Freshx_API.Models.EmailContent", "EmailContent")
                        .WithMany()
                        .HasForeignKey("EmailContentId");

                    b.Navigation("EmailContent");
                });

            modelBuilder.Entity("Freshx_API.Models.Employee", b =>
                {
                    b.HasOne("Freshx_API.Models.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId");

                    b.HasOne("Freshx_API.Models.District", "District")
                        .WithMany()
                        .HasForeignKey("DistrictCode");

                    b.HasOne("Freshx_API.Models.Province", "Province")
                        .WithMany()
                        .HasForeignKey("ProvinceCode");

                    b.HasOne("Freshx_API.Models.Ward", "Ward")
                        .WithMany()
                        .HasForeignKey("WardCode");

                    b.Navigation("Department");

                    b.Navigation("District");

                    b.Navigation("Province");

                    b.Navigation("Ward");
                });

            modelBuilder.Entity("Freshx_API.Models.ExaminationConfirmation", b =>
                {
                    b.HasOne("Freshx_API.Models.Invoice", "Invoice")
                        .WithMany()
                        .HasForeignKey("MedicalExaminationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Freshx_API.Models.Invoice", "MedicalExamination")
                        .WithMany()
                        .HasForeignKey("MedicalExaminationInvoiceId");

                    b.HasOne("Freshx_API.Models.Reception", "Reception")
                        .WithMany()
                        .HasForeignKey("ReceptionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Invoice");

                    b.Navigation("MedicalExamination");

                    b.Navigation("Reception");
                });

            modelBuilder.Entity("Freshx_API.Models.ICDCatalog", b =>
                {
                    b.HasOne("Freshx_API.Models.ICDCatalog", "ICDCatalogGroup")
                        .WithMany()
                        .HasForeignKey("ICDCatalogGroupId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("ICDCatalogGroup");
                });

            modelBuilder.Entity("Freshx_API.Models.Invoice", b =>
                {
                    b.HasOne("Freshx_API.Models.ICDCatalog", "ICDCatalog")
                        .WithMany()
                        .HasForeignKey("ICDCatalogId");

                    b.HasOne("Freshx_API.Models.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId");

                    b.HasOne("Freshx_API.Models.Reception", "Reception")
                        .WithMany()
                        .HasForeignKey("ReceptionId");

                    b.Navigation("ICDCatalog");

                    b.Navigation("Patient");

                    b.Navigation("Reception");
                });

            modelBuilder.Entity("Freshx_API.Models.LabResult", b =>
                {
                    b.HasOne("Freshx_API.Models.Doctor", "ConcludingDoctor")
                        .WithMany()
                        .HasForeignKey("ConcludingDoctorId");

                    b.HasOne("Freshx_API.Models.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId");

                    b.HasOne("Freshx_API.Models.Reception", "Reception")
                        .WithMany()
                        .HasForeignKey("ReceptionId");

                    b.HasOne("Freshx_API.Models.Technician", "Technician")
                        .WithMany()
                        .HasForeignKey("TechnicianId");

                    b.Navigation("ConcludingDoctor");

                    b.Navigation("Patient");

                    b.Navigation("Reception");

                    b.Navigation("Technician");
                });

            modelBuilder.Entity("Freshx_API.Models.LabTestFile", b =>
                {
                    b.HasOne("Freshx_API.Models.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Freshx_API.Models.Reception", "Reception")
                        .WithMany()
                        .HasForeignKey("ReceptionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Patient");

                    b.Navigation("Reception");
                });

            modelBuilder.Entity("Freshx_API.Models.LoginSession", b =>
                {
                    b.HasOne("Freshx_API.Models.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId");

                    b.HasOne("Freshx_API.Models.Pharmacy", "Pharmacy")
                        .WithMany()
                        .HasForeignKey("PharmacyId");

                    b.HasOne("Freshx_API.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Department");

                    b.Navigation("Pharmacy");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Freshx_API.Models.MedicalServiceRequest", b =>
                {
                    b.HasOne("Freshx_API.Models.Employee", "AssignedBy")
                        .WithMany()
                        .HasForeignKey("AssignedById");

                    b.HasOne("Freshx_API.Models.MedicalServiceRequest", "ParentMedicalServiceRequest")
                        .WithMany()
                        .HasForeignKey("ParentMedicalServiceRequestId");

                    b.HasOne("Freshx_API.Models.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId");

                    b.HasOne("Freshx_API.Models.Reception", "Reception")
                        .WithMany()
                        .HasForeignKey("ReceptionId");

                    b.HasOne("Freshx_API.Models.Employee", "SampleCollector")
                        .WithMany()
                        .HasForeignKey("SampleCollectorId");

                    b.HasOne("Freshx_API.Models.ServiceCatalog", "Service")
                        .WithMany()
                        .HasForeignKey("ServiceId");

                    b.Navigation("AssignedBy");

                    b.Navigation("ParentMedicalServiceRequest");

                    b.Navigation("Patient");

                    b.Navigation("Reception");

                    b.Navigation("SampleCollector");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("Freshx_API.Models.Menu", b =>
                {
                    b.HasOne("Freshx_API.Models.Menu", "ParentMenu")
                        .WithMany()
                        .HasForeignKey("ParentMenuId");

                    b.Navigation("ParentMenu");
                });

            modelBuilder.Entity("Freshx_API.Models.MenuPermission", b =>
                {
                    b.HasOne("Freshx_API.Models.Menu", "Menu")
                        .WithMany()
                        .HasForeignKey("MenuId");

                    b.HasOne("Freshx_API.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Menu");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Freshx_API.Models.Pharmacy", b =>
                {
                    b.HasOne("Freshx_API.Models.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId");

                    b.HasOne("Freshx_API.Models.InventoryType", "InventoryType")
                        .WithMany()
                        .HasForeignKey("InventoryTypeId");

                    b.Navigation("Department");

                    b.Navigation("InventoryType");
                });

            modelBuilder.Entity("Freshx_API.Models.Prescription", b =>
                {
                    b.HasOne("Freshx_API.Models.DrugCatalog", "DrugCatalog")
                        .WithMany()
                        .HasForeignKey("DrugCatalogId");

                    b.HasOne("Freshx_API.Models.Invoice", "MedicalExamination")
                        .WithMany()
                        .HasForeignKey("MedicalExaminationId");

                    b.Navigation("DrugCatalog");

                    b.Navigation("MedicalExamination");
                });

            modelBuilder.Entity("Freshx_API.Models.Reception", b =>
                {
                    b.HasOne("Freshx_API.Models.Doctor", "AssignedDoctor")
                        .WithMany("Receptions")
                        .HasForeignKey("AssignedDoctorId");

                    b.HasOne("Freshx_API.Models.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId");

                    b.HasOne("Freshx_API.Models.Receptionist", "Receptionist")
                        .WithMany("Receptions")
                        .HasForeignKey("ReceptionistId");

                    b.Navigation("AssignedDoctor");

                    b.Navigation("Patient");

                    b.Navigation("Receptionist");
                });

            modelBuilder.Entity("Freshx_API.Models.ReportParameter", b =>
                {
                    b.HasOne("Freshx_API.Models.Report", "Report")
                        .WithMany()
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Freshx_API.Models.TypeOfControlInput", "TypeOfControlInput")
                        .WithMany()
                        .HasForeignKey("TypeOfControlInputId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Report");

                    b.Navigation("TypeOfControlInput");
                });

            modelBuilder.Entity("Freshx_API.Models.ReportPermission", b =>
                {
                    b.HasOne("Freshx_API.Models.Report", "Report")
                        .WithMany()
                        .HasForeignKey("ReportId");

                    b.HasOne("Freshx_API.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Report");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Freshx_API.Models.ServiceCatalog", b =>
                {
                    b.HasOne("Freshx_API.Models.ServiceCatalog", "ParentService")
                        .WithMany()
                        .HasForeignKey("ParentServiceId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Freshx_API.Models.ServiceCatalog", null)
                        .WithMany("ChildServices")
                        .HasForeignKey("ServiceCatalogId1");

                    b.HasOne("Freshx_API.Models.ServiceGroup", "ServiceGroup")
                        .WithMany()
                        .HasForeignKey("ServiceGroupId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Freshx_API.Models.ServiceGroup", null)
                        .WithMany("ServiceCatalogs")
                        .HasForeignKey("ServiceGroupId1");

                    b.Navigation("ParentService");

                    b.Navigation("ServiceGroup");
                });

            modelBuilder.Entity("Freshx_API.Models.ServiceStandardValue", b =>
                {
                    b.HasOne("Freshx_API.Models.ServiceCatalog", "ServiceCatalog")
                        .WithMany("ServiceStandardValues")
                        .HasForeignKey("ServiceCatalogId");

                    b.Navigation("ServiceCatalog");
                });

            modelBuilder.Entity("Freshx_API.Models.TemplatePrescriptionDrugMapping", b =>
                {
                    b.HasOne("Freshx_API.Models.DrugCatalog", "DrugCatalog")
                        .WithMany()
                        .HasForeignKey("DrugCatalogId");

                    b.HasOne("Freshx_API.Models.TemplatePrescription", "TemplatePrescription")
                        .WithMany()
                        .HasForeignKey("TemplatePrescriptionId");

                    b.Navigation("DrugCatalog");

                    b.Navigation("TemplatePrescription");
                });

            modelBuilder.Entity("Freshx_API.Models.User", b =>
                {
                    b.HasOne("Freshx_API.Models.Hospital", "Hospital")
                        .WithMany()
                        .HasForeignKey("HospitalId");

                    b.Navigation("Hospital");
                });

            modelBuilder.Entity("Freshx_API.Models.UserAction", b =>
                {
                    b.HasOne("Freshx_API.Models.LoginSession", "LoginSession")
                        .WithMany()
                        .HasForeignKey("LoginSessionId");

                    b.HasOne("Freshx_API.Models.ServiceCatalog", "Service")
                        .WithMany()
                        .HasForeignKey("ServiceId");

                    b.Navigation("LoginSession");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("Freshx_API.Models.UserActionByMedicalRecord", b =>
                {
                    b.HasOne("Freshx_API.Models.LoginSession", "LoginSession")
                        .WithMany()
                        .HasForeignKey("LoginSessionId");

                    b.HasOne("Freshx_API.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("LoginSession");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Freshx_API.Models.UserDepartment", b =>
                {
                    b.HasOne("Freshx_API.Models.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId");

                    b.HasOne("Freshx_API.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Department");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Freshx_API.Models.UserPharmacy", b =>
                {
                    b.HasOne("Freshx_API.Models.Pharmacy", "Pharmacy")
                        .WithMany()
                        .HasForeignKey("PharmacyId");

                    b.HasOne("Freshx_API.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Pharmacy");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Freshx_API.Models.Ward", b =>
                {
                    b.HasOne("Freshx_API.Models.District", "District")
                        .WithMany()
                        .HasForeignKey("DistrictCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("District");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Freshx_API.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Freshx_API.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Freshx_API.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Freshx_API.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Freshx_API.Models.Doctor", b =>
                {
                    b.Navigation("Receptions");
                });

            modelBuilder.Entity("Freshx_API.Models.Province", b =>
                {
                    b.Navigation("Districts");
                });

            modelBuilder.Entity("Freshx_API.Models.Receptionist", b =>
                {
                    b.Navigation("Receptions");
                });

            modelBuilder.Entity("Freshx_API.Models.ServiceCatalog", b =>
                {
                    b.Navigation("ChildServices");

                    b.Navigation("ServiceStandardValues");
                });

            modelBuilder.Entity("Freshx_API.Models.ServiceGroup", b =>
                {
                    b.Navigation("ServiceCatalogs");
                });
#pragma warning restore 612, 618
        }
    }
}
